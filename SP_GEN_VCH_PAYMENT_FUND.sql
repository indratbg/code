create or replace PROCEDURE SP_GEN_VCH_PAYMENT_FUND(
    P_DOC_DATE DATE,
    P_CLIENT_CD   VARCHAR2,
    P_BRANCH_CODE VARCHAR2,
    P_USER_ID T_MANY_HEADER.USER_ID%TYPE,
    P_IP_ADDRESS T_MANY_HEADER.IP_ADDRESS%TYPE,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  CURSOR CSR_DATA
  IS  
  SELECT M.BRANCH_CODE,A.CLIENT_CD,M.CLIENT_NAME, DECODE(SIGN(T0),-1, DECODE(SIGN(FUND_BALANCE),1, DECODE(SIGN(ABS(T0)-FUND_BALANCE),-1,T0,-FUND_BALANCE), 0), T0) T0,
  M.BANK_CD, M.BANK_ACCT_NUM,M.OLT, F.BANK_CD BANK_RDI
  FROM
    (
      SELECT CLIENT_CD, -F_CLIENT_ONHAND_CASH(CLIENT_CD, P_DOC_DATE) T0, -F_GET_DUE_FUNDBAL(CLIENT_CD, P_DOC_DATE) FUND_BALANCE
      FROM FUND_CLIENT_MASTER
    )A, MST_CLIENT M, (
      SELECT CLIENT_CD, BANK_CD,ACCT_STAT
      FROM MST_CLIENT_FLACCT
      WHERE ACCT_STAT IN('A','I')
      AND APPROVED_STAT='A'
    )F
  WHERE A.CLIENT_CD=M.CLIENT_CD
  AND A.CLIENT_CD  =F.CLIENT_CD
  AND M.CLIENT_CD  =F.CLIENT_CD
  AND DECODE(SIGN(T0),-1, DECODE(SIGN(FUND_BALANCE),1, DECODE(SIGN(ABS(T0)-FUND_BALANCE),-1,T0,-FUND_BALANCE), 0), T0) < 0
  AND (TRIM(M.BRANCH_CODE) = P_BRANCH_CODE OR '%'  =P_BRANCH_CODE )
  AND (M.CLIENT_CD           = P_CLIENT_CD OR '%'  = P_CLIENT_CD);
  
  
  V_ERR        EXCEPTION;
  V_ERROR_CODE NUMBER(5);
  V_ERROR_MSG  VARCHAR2(200);
  V_UPDATE_SEQ T_MANY_HEADER.UPDATE_SEQ%TYPE;
  V_UPDATE_DATE T_MANY_HEADER.UPDATE_DATE%TYPE;
  V_MENU_NAME T_MANY_HEADER.MENU_NAME%TYPE:='GENERATE VOUCHER PAYMENT FUND';
  V_DOC_NUM T_PAYRECH.PAYREC_NUM%TYPE;
  V_AMT T_PAYRECH.CURR_AMT%TYPE;
  V_FOLDER_PREFIX MST_SYS_PARAM.DSTR1%TYPE;
  V_BANK_GLA T_PAYRECH.GL_ACCT_CD%TYPE;
  V_BANK_SLA T_PAYRECH.SL_ACCT_CD%TYPE;
  -- MENGGUNAKAN USER-DEFINED RECORD KARENA URUTAN FIELD TABEL T_ACCOUNT_LEDGER DI DATABASE DEVELOPMENT DAN PRODUCTION BERBEDA
TYPE V_LEDGER_RECORD_TYPE
IS
  RECORD
  (
    XN_DOC_NUM T_ACCOUNT_LEDGER.XN_DOC_NUM%TYPE,
    TAL_ID T_ACCOUNT_LEDGER.TAL_ID%TYPE,
    DOC_REF_NUM T_ACCOUNT_LEDGER.DOC_REF_NUM%TYPE,
    ACCT_TYPE T_ACCOUNT_LEDGER.ACCT_TYPE%TYPE,
    SL_ACCT_CD T_ACCOUNT_LEDGER.SL_ACCT_CD%TYPE,
    GL_ACCT_CD T_ACCOUNT_LEDGER.GL_ACCT_CD%TYPE,
    CHQ_SNO T_ACCOUNT_LEDGER.CHQ_SNO%TYPE,
    CURR_CD T_ACCOUNT_LEDGER.CURR_CD%TYPE,
    BRCH_CD T_ACCOUNT_LEDGER.BRCH_CD%TYPE,
    CURR_VAL T_ACCOUNT_LEDGER.CURR_VAL%TYPE,
    XN_VAL T_ACCOUNT_LEDGER.XN_VAL%TYPE,
    BUDGET_CD T_ACCOUNT_LEDGER.BUDGET_CD%TYPE,
    DB_CR_FLG T_ACCOUNT_LEDGER.DB_CR_FLG%TYPE,
    LEDGER_NAR T_ACCOUNT_LEDGER.LEDGER_NAR%TYPE,
    CASHIER_ID T_ACCOUNT_LEDGER.CASHIER_ID%TYPE,
    DOC_DATE T_ACCOUNT_LEDGER.DOC_DATE%TYPE,
    DUE_DATE T_ACCOUNT_LEDGER.DUE_DATE%TYPE,
    NETTING_DATE T_ACCOUNT_LEDGER.NETTING_DATE%TYPE,
    NETTING_FLG T_ACCOUNT_LEDGER.NETTING_FLG%TYPE,
    RECORD_SOURCE T_ACCOUNT_LEDGER.RECORD_SOURCE%TYPE,
    SETT_FOR_CURR T_ACCOUNT_LEDGER.SETT_FOR_CURR%TYPE,
    SETT_STATUS T_ACCOUNT_LEDGER.SETT_STATUS%TYPE,
    RVPV_NUMBER T_ACCOUNT_LEDGER.RVPV_NUMBER%TYPE,
    FOLDER_CD T_ACCOUNT_LEDGER.FOLDER_CD%TYPE,
    SETT_VAL T_ACCOUNT_LEDGER.SETT_VAL%TYPE,
    ARAP_DUE_DATE T_ACCOUNT_LEDGER.ARAP_DUE_DATE%TYPE,
    REVERSAL_JUR T_ACCOUNT_LEDGER.REVERSAL_JUR%TYPE,
    MANUAL T_ACCOUNT_LEDGER.MANUAL%TYPE,
    SETT_CURR_MIN T_ACCOUNT_LEDGER.SETT_CURR_MIN%TYPE );
TYPE T_MANY_DETAIL_TABLE
IS
  TABLE OF T_MANY_DETAIL%ROWTYPE;
  V_TAB T_MANY_DETAIL_TABLE := T_MANY_DETAIL_TABLE();
  V_LEDGER_REC V_LEDGER_RECORD_TYPE;
  V_DETAIL_REC T_PAYRECD%ROWTYPE;
  V_PAYREC_DATE DATE:=P_DOC_DATE;
  V_LEDGER_NAR T_PAYRECH.REMARKS%TYPE;
  V_DOC_REF_FLG MST_SYS_PARAM.DFLG1%TYPE;
  V_FOLDER_CD T_FOLDER.FOLDER_CD%TYPE;
  V_CNT NUMBER(5);
  V_IP_BANK_CD MST_SYS_PARAM.DSTR1%TYPE;
  V_PAYEE_BANK_CD MST_SYS_PARAM.DSTR2%TYPE;
  V_BANK_AMT T_ACCOUNT_LEDGER.CURR_VAL%TYPE;
  V_TRANSFER_FEE T_CHEQ.DEDUCT_FEE%TYPE;
  V_GL_ACCT_CD T_ACCOUNT_LEDGER.GL_ACCT_CD%TYPE;
  V_RDI_BANK_CD MST_FUND_BANK.IP_BANK_CD%TYPE;
  V_ROUND_GL_A MST_GLA_TRX.GL_A%TYPE;
  V_ROUND_SL_A MST_GL_ACCOUNT.SL_A%TYPE;
  V_PREFIX_SL MST_SYS_PARAM.DNUM1%TYPE;
V_ROUND_AMT T_PAYRECH.CURR_AMT%TYPE:=0;
V_LINE_JUR NUMBER(1):=0;
V_ROUND_DB_CR_FLG T_ACCOUNT_LEDGER.DB_CR_FLG%TYPE;
BEGIN


  BEGIN
    SELECT DSTR1,DSTR2
    INTO V_BANK_GLA,V_BANK_SLA
    FROM MST_SYS_PARAM
    WHERE PARAM_ID='VOUCHER ENTRY'
    AND PARAM_CD1 ='RDI_PAY'
    AND PARAM_CD2 ='BANK'
    AND PARAM_CD3 ='BCA02';
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE := -5;
    V_ERROR_MSG  := SUBSTR('SELECT BANK FROM MST_SYS_PARAM '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  BEGIN
    SELECT DSTR1
    INTO V_FOLDER_PREFIX
    FROM MST_SYS_PARAM
    WHERE PARAM_ID='GEN VOUCHER PAY FUND'
    AND PARAM_CD1 ='FOLDER'
    AND PARAM_CD2 ='PREFIX';
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    V_FOLDER_PREFIX:=NULL;
  WHEN OTHERS THEN
    V_ERROR_CODE := -10;
    V_ERROR_MSG  := SUBSTR('SELECT FOLDER PREFIX FROM MST_SYS_PARAM '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  BEGIN
    SELECT DFLG1
    INTO V_DOC_REF_FLG
    FROM MST_SYS_PARAM
    WHERE PARAM_ID = 'SYSTEM'
    AND PARAM_CD1  = 'DOC_REF';
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE := -20;
    V_ERROR_MSG  := SUBSTR('RETRIEVE MST_SYS_PARAM FOR DOC_REF'||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  BEGIN
		SELECT GL_A INTO V_ROUND_GL_A
		FROM MST_GLA_TRX
		WHERE JUR_TYPE = 'ROUND';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_ERROR_CODE := -2;
			V_ERROR_MSG := SUBSTR('NOT FOUND MST_GLA_TRX JURNAL TYPE : ROUND '||SQLERRM,1,200);
			RAISE V_ERR;
		WHEN OTHERS THEN
			V_ERROR_CODE := -3;
			V_ERROR_MSG := SUBSTR('READ MST_GLA_TRX JURNAL TYPE : ROUND '||SQLERRM,1,200);
			RAISE V_ERR;
	END;


	BEGIN
	SELECT DNUM1 INTO V_PREFIX_SL FROM MST_SYS_PARAM WHERE PARAM_ID='GEN VCH SETTLE TRX' AND PARAM_CD1='BRANCH' AND PARAM_CD2='PREFIX';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_ERROR_CODE := -2000;
			V_ERROR_MSG := SUBSTR('NOT FOUND MST_SYS_PARAM PREFIX : BRANCH '||SQLERRM,1,200);
			RAISE V_ERR;
		WHEN OTHERS THEN
			V_ERROR_CODE := -2001;
			V_ERROR_MSG := SUBSTR('READ MST_GLA_TRX JURNAL PREFIX : BRANCH '||SQLERRM,1,200);
			RAISE V_ERR;
	END;

  FOR REC IN CSR_DATA
  LOOP
  
    V_AMT :=ABS(REC.T0);
    --IF AMT VOUCHER >0
    IF V_AMT>0 THEN
    
      BEGIN
        SP_T_MANY_HEADER_INSERT(V_MENU_NAME, 'I', P_USER_ID, P_IP_ADDRESS, NULL, V_UPDATE_DATE, V_UPDATE_SEQ, V_ERROR_CODE, V_ERROR_MSG);
      EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE := -30;
        V_ERROR_MSG  := SUBSTR('SP_T_MANY_HEADER '||SQLERRM,1,200);
        RAISE V_ERR;
      END;
      

       BEGIN
  		SELECT IP_BANK_CD INTO V_RDI_BANK_CD FROM MST_FUND_BANK WHERE BANK_CD = REC.BANK_RDI;
		EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE := -40;
        V_ERROR_MSG  := SUBSTR('SELECT IP BANK CD FROM MST_FUND_BANK '||SQLERRM,1,200);
        RAISE V_ERR;
      END;


		BEGIN
			SELECT SL_A INTO V_ROUND_SL_A
			FROM MST_GL_ACCOUNT
			WHERE TRIM(GL_A) = TRIM(V_ROUND_GL_A) 
			AND SUBSTR(SL_A,1,V_PREFIX_SL) =
			(
				SELECT ACCT_PREFIX
				FROM MST_BRANCH
				WHERE BRCH_CD = TRIM(REC.BRANCH_CODE)
			);
		EXCEPTION
			WHEN OTHERS THEN
				V_ERROR_CODE := -4;
				V_ERROR_MSG := SUBSTR('READ MST_GL_ACCOUNT JURNAL TYPE : ROUND '||SQLERRM,1,200);
				RAISE V_ERR;
		END;

		--CEK PAKAI PEMBULATAN / TIDAK
		IF V_AMT <> ROUND(V_AMT,0) THEN
			V_ROUND_AMT := ROUND(V_AMT,0)-V_AMT;
      
			IF V_ROUND_AMT<> 0 THEN
				V_LINE_JUR:=1;
				IF V_ROUND_AMT>0 THEN
					V_ROUND_AMT :=V_ROUND_AMT;--DEBIT
					V_ROUND_DB_CR_FLG :='D';
				ELSE
					V_ROUND_AMT :=V_ROUND_AMT;--CREDIT
					V_ROUND_DB_CR_FLG :='C';
				END IF;
			END IF;
		END IF;


	V_BANK_AMT := V_AMT+V_ROUND_AMT;
	V_ROUND_AMT := ABS(V_ROUND_AMT);

      V_DOC_NUM    := GET_DOCNUM_VCH(V_PAYREC_DATE,'PD');
      V_LEDGER_NAR := 'PENARIKAN - '||REC.CLIENT_CD;
      V_FOLDER_CD  := F_GET_FOLDER_NUM(V_PAYREC_DATE, TRIM(V_FOLDER_PREFIX));
     V_GL_ACCT_CD := F_GL_ACCT_T3_JAN2016(REC.CLIENT_CD,'D');
      V_TRANSFER_FEE :=F_TRANSFER_FEE(V_BANK_AMT,V_RDI_BANK_CD,REC.BANK_CD,REC.BRANCH_CODE,REC.OLT,'Y');

      IF V_TRANSFER_FEE>0 THEN
      	V_TRANSFER_FEE := V_TRANSFER_FEE*-1;
      END IF;
      

      
      BEGIN
        SELECT DSTR1, DSTR2
        INTO V_IP_BANK_CD, V_PAYEE_BANK_CD
        FROM MST_SYS_PARAM
        WHERE PARAM_ID = 'RVPV_AUTO_TRF'
        AND PARAM_CD1  = 'BANKRDI'
        AND PARAM_CD2  = REC.BANK_RDI
        AND (PARAM_CD3 = TRIM(REC.BRANCH_CODE)
        OR PARAM_CD3   = '%');
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      NULL;
      WHEN OTHERS THEN
        V_ERROR_CODE := -40;
        V_ERROR_MSG  := SUBSTR('SELECT MST_SYS_PARAM '||SQLERRM,1,200);
        RAISE V_ERR;
      END;

      


      --T_PAYRECH
      SELECT V_UPDATE_DATE AS UPDATE_DATE, V_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, 1 AS RECORD_SEQ, NULL AS TABLE_ROWID, A.FIELD_NAME, FIELD_TYPE, B.FIELD_VALUE, 'I' AS STATUS, B.UPD_FLG BULK COLLECT
      INTO V_TAB
      FROM
        (
          SELECT 'T_PAYRECH' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
          FROM ALL_TAB_COLUMNS
          WHERE TABLE_NAME = 'T_PAYRECH'
          AND OWNER        = 'IPNEXTG'
        )
        A, (
          SELECT 'PAYREC_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'PAYREC_TYPE' AS FIELD_NAME, 'PD' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'PAYREC_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'ACCT_TYPE' AS FIELD_NAME, 'ROR' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'SL_ACCT_CD' AS FIELD_NAME, V_BANK_SLA AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CURR_CD' AS FIELD_NAME, 'IDR' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'CURR_AMT' AS FIELD_NAME, TO_CHAR(V_BANK_AMT) AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'REMARKS' AS FIELD_NAME, V_LEDGER_NAR AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'GL_ACCT_CD' AS FIELD_NAME, V_BANK_GLA AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CLIENT_CD' AS FIELD_NAME, REC.CLIENT_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'FOLDER_CD' AS FIELD_NAME, V_FOLDER_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'NUM_CHEQ' AS FIELD_NAME, '0' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'CLIENT_BANK_ACCT' AS FIELD_NAME, REC.BANK_ACCT_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CLIENT_BANK_NAME' AS FIELD_NAME, REC.BANK_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'REVERSAL_JUR' AS FIELD_NAME, 'N' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'USER_ID' AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CRE_DT' AS FIELD_NAME, TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
        )
        B
      WHERE A.FIELD_NAME = B.FIELD_NAME;
      FORALL I IN V_TAB.FIRST .. V_TAB.LAST
      INSERT INTO T_MANY_DETAIL VALUES V_TAB(I);
      


	FOR I IN 1..(1+V_LINE_JUR) LOOP
      --T_PAYRECD
      SELECT V_UPDATE_DATE AS UPDATE_DATE, V_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, I AS RECORD_SEQ, NULL AS TABLE_ROWID, A.FIELD_NAME,FIELD_TYPE, B.FIELD_VALUE, 'I' AS STATUS, B.UPD_FLG BULK COLLECT
      INTO V_TAB
      FROM
        (
          SELECT 'T_PAYRECD' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
          FROM ALL_TAB_COLUMNS
          WHERE TABLE_NAME = 'T_PAYRECD'
          AND OWNER        = 'IPNEXTG'
        )
        A, (
          SELECT 'PAYREC_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'PAYREC_TYPE' AS FIELD_NAME, 'PD' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'PAYREC_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CLIENT_CD' AS FIELD_NAME, REC.CLIENT_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'GL_ACCT_CD' AS FIELD_NAME, DECODE(I,1,V_GL_ACCT_CD,V_ROUND_GL_A) AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'SL_ACCT_CD' AS FIELD_NAME, DECODE(I,1,REC.CLIENT_CD,V_ROUND_SL_A) AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DB_CR_FLG' AS FIELD_NAME, DECODE(I,1,'D',V_ROUND_DB_CR_FLG) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'PAYREC_AMT' AS FIELD_NAME, TO_CHAR(DECODE(I,1,V_AMT,V_ROUND_AMT)) AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DOC_REF_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'TAL_ID' AS FIELD_NAME, TO_CHAR(I) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'REMARKS' AS FIELD_NAME, DECODE(I,1,V_LEDGER_NAR,'PEMBULATAN') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'RECORD_SOURCE' AS FIELD_NAME, 'VCH' AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DOC_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'REF_FOLDER_CD' AS FIELD_NAME, V_FOLDER_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'GL_REF_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'BRCH_CD' AS FIELD_NAME, REC.BRANCH_CODE AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DOC_TAL_ID' AS FIELD_NAME, TO_CHAR(I) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'DUE_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CRE_DT' AS FIELD_NAME, TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'USER_ID' AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
        )
        B
      WHERE A.FIELD_NAME = B.FIELD_NAME;
      FORALL I IN V_TAB.FIRST .. V_TAB.LAST
      INSERT INTO T_MANY_DETAIL VALUES V_TAB(I);
      
      END LOOP;--END LOOP INSERT T_PAYRECD




      FOR I IN 1..(2+V_LINE_JUR)
      LOOP
        --T_ACCOUNT_LEDGER
        SELECT V_UPDATE_DATE AS UPDATE_DATE, V_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, I AS RECORD_SEQ, NULL AS TABLE_ROWID, A.FIELD_NAME, FIELD_TYPE, B.FIELD_VALUE, 'I' AS STATUS, B.UPD_FLG BULK COLLECT
        INTO V_TAB
        FROM
          (
            SELECT 'T_ACCOUNT_LEDGER' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
            FROM ALL_TAB_COLUMNS
            WHERE TABLE_NAME = 'T_ACCOUNT_LEDGER'
            AND OWNER        = 'IPNEXTG'
          )
          A, (
            SELECT 'XN_DOC_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'TAL_ID' AS FIELD_NAME, TO_CHAR(DECODE(V_LINE_JUR,1,DECODE(I,1,2,2,3,555),DECODE(I,1,2,555))) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'DOC_REF_NUM' AS FIELD_NAME, DECODE(V_DOC_REF_FLG,'Y',V_DOC_NUM,NULL) AS FIELD_VALUE, 'N' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'ACCT_TYPE' AS FIELD_NAME, DECODE(I,1,'AR',NULL) AS FIELD_VALUE, 'N' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'SL_ACCT_CD' AS FIELD_NAME, DECODE(V_LINE_JUR,1,DECODE(I,1,REC.CLIENT_CD,2,V_ROUND_SL_A,V_BANK_SLA),DECODE(I,1,REC.CLIENT_CD,V_BANK_SLA)) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'GL_ACCT_CD' AS FIELD_NAME, DECODE(V_LINE_JUR,1,DECODE(I,1,V_GL_ACCT_CD,2,V_ROUND_GL_A,V_BANK_GLA),DECODE(I,1,V_GL_ACCT_CD,V_BANK_GLA)) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'CHRG_CD' AS FIELD_NAME, NULL AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'CHQ_SNO' AS FIELD_NAME, NULL AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'CURR_CD' AS FIELD_NAME, 'IDR' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'BRCH_CD' AS FIELD_NAME, DECODE(I,1,REC.BRANCH_CODE,NULL) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'CURR_VAL' AS FIELD_NAME, TO_CHAR(DECODE(V_LINE_JUR,1,DECODE(I,1,V_AMT,2,V_ROUND_AMT,V_BANK_AMT),V_AMT)) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'XN_VAL' AS FIELD_NAME, TO_CHAR(DECODE(V_LINE_JUR,1,DECODE(I,1,V_AMT,2,V_ROUND_AMT,V_BANK_AMT),V_AMT)) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'BUDGET_CD' AS FIELD_NAME, 'PVCH' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'DB_CR_FLG' AS FIELD_NAME, DECODE(V_LINE_JUR,1,DECODE(I,1,'D',2,V_ROUND_DB_CR_FLG,'C'),DECODE(I,1,'D','C') )      AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'LEDGER_NAR' AS FIELD_NAME, DECODE(V_LINE_JUR,1,DECODE(I,2,'PEMBULATAN',V_LEDGER_NAR),V_LEDGER_NAR) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'CASHIER_ID' AS FIELD_NAME, NULL AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'DOC_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'DUE_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'NETTING_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'NETTING_FLG' AS FIELD_NAME, NULL AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'RECORD_SOURCE' AS FIELD_NAME, 'PD' AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'SETT_FOR_CURR' AS FIELD_NAME, TO_CHAR(0) AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'SETT_STATUS' AS FIELD_NAME, DECODE(I,1,'N',NULL) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'RVPV_NUMBER' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'FOLDER_CD' AS FIELD_NAME, V_FOLDER_CD AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'SETT_VAL' AS FIELD_NAME, TO_CHAR(0) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'ARAP_DUE_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'RVPV_GSSL' AS FIELD_NAME, NULL AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'REVERSAL_JUR' AS FIELD_NAME, 'N' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'MANUAL' AS FIELD_NAME, 'N' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
            UNION ALL
            SELECT 'CRE_DT' AS FIELD_NAME, TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
            UNION ALL
            SELECT 'USER_ID' AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, 'Y' UPD_FLG
            FROM DUAL
          )
          B
        WHERE A.FIELD_NAME = B.FIELD_NAME;
        FORALL I IN V_TAB.FIRST .. V_TAB.LAST
        INSERT INTO T_MANY_DETAIL VALUES V_TAB(I);
        
      END LOOP;--END LOOP T_ACCOUNT_LEDGER
      
      --T_CHEQ
      SELECT V_UPDATE_DATE AS UPDATE_DATE, V_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, 1 AS RECORD_SEQ, NULL AS TABLE_ROWID, A.FIELD_NAME,FIELD_TYPE, B.FIELD_VALUE, 'I' AS STATUS, B.UPD_FLG BULK COLLECT
      INTO V_TAB
      FROM
        (
          SELECT 'T_CHEQ' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
          FROM ALL_TAB_COLUMNS
          WHERE TABLE_NAME = 'T_CHEQ'
          AND OWNER        = 'IPNEXTG'
        )
        A, (
          SELECT 'BANK_CD' AS FIELD_NAME, V_IP_BANK_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'SL_ACCT_CD' AS FIELD_NAME, V_BANK_SLA AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'BG_CQ_FLG' AS FIELD_NAME, 'RD' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'CHQ_NUM' AS FIELD_NAME, V_FOLDER_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CHQ_DT' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CHQ_AMT' AS FIELD_NAME, TO_CHAR(V_BANK_AMT) AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'RVPV_NUMBER' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CHQ_STAT' AS FIELD_NAME, 'A' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'PAYEE_BANK_CD' AS FIELD_NAME, V_PAYEE_BANK_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'PAYEE_ACCT_NUM' AS FIELD_NAME, REC.BANK_ACCT_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DEDUCT_FEE' AS FIELD_NAME, TO_CHAR(V_TRANSFER_FEE) AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'SEQNO' AS FIELD_NAME, '1' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'PAYEE_NAME' AS FIELD_NAME, REC.CLIENT_NAME AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DESCRIP' AS FIELD_NAME, REC.CLIENT_NAME AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CHQ_SEQ' AS FIELD_NAME, '1' AS FIELD_VALUE, 'Y' UPD_FLG FROM DUAL
          UNION ALL
          SELECT 'CRE_DT' AS FIELD_NAME, TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'USER_ID' AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
        ) B
      WHERE A.FIELD_NAME = B.FIELD_NAME;
      FORALL I IN V_TAB.FIRST .. V_TAB.LAST
      INSERT INTO T_MANY_DETAIL VALUES V_TAB(I);
      
      --T_FOLDER
      SELECT V_UPDATE_DATE AS UPDATE_DATE, V_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, 1 AS RECORD_SEQ, NULL AS TABLE_ROWID, A.FIELD_NAME, FIELD_TYPE, B.FIELD_VALUE, 'I' AS STATUS, B.UPD_FLG BULK COLLECT
      INTO V_TAB
      FROM
        (
          SELECT 'T_FOLDER' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
          FROM ALL_TAB_COLUMNS
          WHERE TABLE_NAME = 'T_FOLDER'
          AND OWNER        = 'IPNEXTG'
        )
        A, (
          SELECT 'FLD_MON' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'MMYY') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'FOLDER_CD' AS FIELD_NAME, V_FOLDER_CD AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DOC_DATE' AS FIELD_NAME, TO_CHAR(V_PAYREC_DATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'DOC_NUM' AS FIELD_NAME, V_DOC_NUM AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'USER_ID' AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
          UNION ALL
          SELECT 'CRE_DT' AS FIELD_NAME, TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE, 'Y' UPD_FLG
          FROM DUAL
        )B
      WHERE A.FIELD_NAME = B.FIELD_NAME;
      FORALL I IN V_TAB.FIRST .. V_TAB.LAST
      INSERT INTO T_MANY_DETAIL VALUES V_TAB(I);
      
      V_CNT:=V_CNT+1;
    END IF;----END IF AMT VOUCHER >0
    
  END LOOP;
  
  P_ERROR_CODE:=1;
  P_ERROR_MSG :='';
  
EXCEPTION
WHEN NO_DATA_FOUND THEN
  NULL;
WHEN V_ERR THEN
  P_ERROR_CODE := V_ERROR_CODE;
  P_ERROR_MSG  := V_ERROR_MSG;
  ROLLBACK;
WHEN OTHERS THEN
  -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
  P_ERROR_CODE := -1;
  P_ERROR_MSG  := SUBSTR(SQLERRM,1,200);
  ROLLBACK;
  RAISE;
END SP_GEN_VCH_PAYMENT_FUND;