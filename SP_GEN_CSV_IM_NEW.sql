create or replace PROCEDURE SP_GEN_CSV_IM_NEW(
    P_TRX_DATE DATE,
    P_IM_CODE  VARCHAR2,
    P_USER_ID  VARCHAR2,
    P_UPDATE_SEQ OUT NUMBER,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  V_SEQ_NAME   VARCHAR2(20):='IM_FILE_SEQ';
  v_err        EXCEPTION;
  V_ERROR_CODE NUMBER(5);
  V_ERROR_MSG  VARCHAR2(200);
  V_CNT        NUMBER(5);
  V_SQL        VARCHAR2(200);
  V_UPDATE_SEQ NUMBER;
BEGIN
  --CREATE SEQUENCE FOR UPDATE_SEQ IM FILE
  BEGIN
    SELECT COUNT(1) INTO V_CNT FROM ALL_SEQUENCES WHERE SEQUENCE_NAME=V_SEQ_NAME;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-10;
    V_ERROR_MSG :=SUBSTR('CHECK SEQUENCE '||V_SEQ_NAME||'IN ALL_SEQUENCES'||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  IF V_CNT=0 THEN
    v_sql:='CREATE SEQUENCE '||V_SEQ_NAME ||' INCREMENT BY 1 START WITH 1 MAXVALUE 9999 NOCACHE nocycle';
    BEGIN
      EXECUTE IMMEDIATE V_SQL;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-20;
      V_ERROR_MSG :=SUBSTR('CREATE SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  V_SQL := 'SELECT '||V_SEQ_NAME||'.NEXTVAL FROM DUAL';
  BEGIN
    EXECUTE IMMEDIATE V_SQL INTO V_UPDATE_SEQ;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-30;
    V_ERROR_MSG :=SUBSTR('SELECT SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  --SINARMAS
  IF P_IM_CODE ='DH002' THEN
    BEGIN
      INSERT
      INTO IM_FILE_EXPORT
        (
          IM_CODE,COL1,COL2,COL3,
          COL4,COL5,COL6,
          COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18 ,
          GENERATE_DATE,USER_ID,UPDATE_SEQ
        )
      SELECT P_IM_CODE, FUND_CODE fundID , NULL TransRefNo ,TO_CHAR(TRX_DATE,'DD/MM/YYYY') AS TransactionDate ,
     TO_CHAR(TRX_DUE_DATE,'DD/MM/YYYY') SettlementDate ,P.BR_CODE BrokerCode , STK_CD StockCode , 
      DECODE(GL_CODE,'TBE','B','S') TransactionType ,'0' FlagNetting ,TO_CHAR(ROUND(QTY,2)) Volume , TO_CHAR(ROUND(PRICE,6)) Price ,
      TO_CHAR(ROUND(CURR_VALUE,6)) Proceed , TO_CHAR(ROUND((0.033/100*S.CURR_VALUE),2))LEVY , TO_CHAR(ROUND((0.01/100 * CURR_VALUE),2)) KPEI ,
      TO_CHAR(ROUND(VAT,2))VAT ,TO_CHAR(ROUND(WITHHOLDING_PPH,2))WHT ,TO_CHAR(ROUND(DECODE(GL_CODE,'TJE',(0.1/100*CURR_VALUE),0),2)) CapitalGainTax ,
      TO_CHAR(ROUND(NET_COMMISION_VALUE,2)) BrokerFee , TO_CHAR(ROUND(DECODE(GL_CODE,'TBE',(S.NET_VALUE-S.WITHHOLDING_PPH),(S.NET_VALUE+S.WITHHOLDING_PPH)),2)) NetAmount, 
      SYSDATE GENERATE_DATE,P_USER_ID, V_UPDATE_SEQ
      FROM stock_transaction S, MST_IM M, MST_FUND_CLIENT C,(
        SELECT DSTR1 AS BR_CODE
        FROM MST_SYS_PARAM
        WHERE PARAM_ID='SINVEST'
        AND PARAM_CD1 ='BR_CODE'
      )
    P
      WHERE M.IM_CODE = C.IM_CODE
      AND C.CLIENT_CD = S.SL_CODE
      AND S.TRX_STATUS='A'
      AND M.APPROVED_STAT='A'
      AND C.APPROVED_STAT='A'
      AND M.IM_CODE   = P_IM_CODE
      AND TRX_DATE    = P_TRX_DATE;
    EXCEPTION
    WHEN OTHERS THEN
      P_ERROR_CODE := -40;
      P_ERROR_MSG  :=SUBSTR('INSERT INTO IM_FILE_EXPORT '|| P_IM_CODE||' '||SQLERRM,1,200);
      RAISE;
    END;
  END IF;
  
  --SCHRODER
  IF P_IM_CODE ='SCH02' THEN
    BEGIN
      INSERT
      INTO IM_FILE_EXPORT
        (
          IM_CODE,COL1,COL2,COL3,
          COL4,COL5,COL6,
          COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18 ,COL19,COL20,COL21,COL22,
          GENERATE_DATE,USER_ID,UPDATE_SEQ
        )
   SELECT P_IM_CODE,C.PORTFOLIO_ID, null TRANS_NO, DECODE(T.GL_CODE,'TBE','B','S')B_S, T.TRX_DATE, T.TRX_DUE_DATE, T.STK_CD, S.ISIN_CODE,
      'IDR' AS QC, TO_CHAR(T.QTY)QTY, TO_CHAR(T.PRICE)PRICE, TO_CHAR(T.CURR_VALUE)CURR_VALUE, TO_CHAR(T.NET_COMMISION_VALUE)NET_COMMISION_VALUE,
      TO_CHAR(T.LEVY)LEVY, TO_CHAR(T.VAT)VAT,TO_CHAR(DECODE(T.GL_CODE,'TJE',(0.1/100*T.CURR_VALUE),0)) AS SALES_TAX, null OTHER_CHARGES, 
      TO_CHAR(T.NET_VALUE) TOTAL, TO_CHAR(T.WITHHOLDING_PPH)WITHHOLDING_PPH,  null  VAT2, 
      TO_CHAR(DECODE(T.GL_CODE,'TJE',(T.NET_VALUE+T.WITHHOLDING_PPH),(T.NET_VALUE-T.WITHHOLDING_PPH))) NET_SETTLEMENT_AMOUNT, T.BROKER_CD,
      P.NAMA_PRSH, SYSDATE GENERATE_DATE, P_USER_ID, V_UPDATE_SEQ
      FROM STOCK_TRANSACTION T, MST_FUND_CLIENT C, MST_COUNTER S, MST_COMPANY P, MST_IM M
      WHERE T.SL_CODE = C.CLIENT_CD
      AND T.STK_CD    = S.STK_CD
      AND C.IM_CODE = M.IM_CODE
      AND T.TRX_STATUS='A'
      AND S.APPROVED_STAT='A'
      AND M.APPROVED_STAT='A'
      AND C.APPROVED_STAT='A'
      AND M.IM_CODE = P_IM_CODE
      AND T.TRX_DATE  = P_TRX_DATE;
    EXCEPTION
    WHEN OTHERS THEN
      P_ERROR_CODE := -50;
      P_ERROR_MSG  :=SUBSTR('INSERT INTO IM_FILE_EXPORT '|| P_IM_CODE||' '||SQLERRM,1,200);
      RAISE;
    END;
  END IF;
  --syailendra
  IF P_IM_CODE ='SYA02' THEN
    BEGIN
      INSERT
      INTO IM_FILE_EXPORT
        (
          IM_CODE,COL1,COL2,COL3,
          COL4,COL5,COL6,
          COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18 ,COL19,COL20,COL21,COL22,COL23,COL24,COL25,COL26,COL27,COL28,
          GENERATE_DATE,USER_ID,UPDATE_SEQ
        )
     SELECT P_IM_CODE,trim(m.branch_code)branch_code, TO_CHAR(T.TRX_DATE,'DD/MM/YYYY')TRX_DATE, TO_CHAR(T.TRX_DUE_DATE,'DD/MM/YYYY')TRX_DUE_DATE, T.SL_CODE, M.CLIENT_NAME, M.DEF_ADDR_1, M.DEF_ADDR_2, M.DEF_ADDR_3,
     M.POST_CD,M.PHONE_NUM, M.FAX_NUM, T.STK_CD, 'L' L_F, T.LOT, T.QTY, T.PRICE,DECODE(T.GL_CODE,'TBE','BUY','SELL') B_S,
      T.TRX_MRKT_TYPE, ROUND(T.CURR_VALUE) TOTAL_VALUE, ROUND(T.NET_COMMISION_VALUE) COMMISSION, ROUND(VAT)VAT, ROUND(LEVY) LEVY ,
      DECODE(GL_CODE,'TJE',ROUND(0.1/100*T.CURR_VALUE),0) SALES_TAX, ROUND(T.WITHHOLDING_PPH) WITHHOLDING_PPH,
       DECODE(GL_CODE,'TBE',ROUND(T.NET_VALUE - T.WITHHOLDING_PPH),ROUND(T.NET_VALUE + T.WITHHOLDING_PPH) )TOTAL_NET, 
       M.NPWP_NO, M.NPWP_NO PKP,S.REM_NAME, SYSDATE GENERATE_DATE, P_USER_ID,V_UPDATE_SEQ
    FROM mst_client m,stock_transaction t, MST_SALES S, MST_IM IM, MST_FUND_CLIENT C
    WHERE m.client_cd  =t.sl_code
    AND M.REM_CD       =S.REM_CD
    AND S.APPROVED_STAT='A'
    AND T.TRX_STATUS   ='A'
    AND M.APPROVED_STAT='A'
    AND M.APPROVED_STAT='A'
    AND C.APPROVED_STAT='A'
    AND IM.IM_CODE     =C.IM_CODE
    AND M.CLIENT_CD    = C.CLIENT_CD
    AND T.TRX_DATE     = P_TRX_DATE
    AND IM.IM_CODE     = P_IM_CODE;
    EXCEPTION
    WHEN OTHERS THEN
      P_ERROR_CODE := -50;
      P_ERROR_MSG  :=SUBSTR('INSERT INTO IM_FILE_EXPORT '|| P_IM_CODE||' '||SQLERRM,1,200);
      RAISE;
    END;
  END IF;
  --LIM
  IF P_IM_CODE ='YJ002' THEN
    BEGIN
      INSERT
      INTO IM_FILE_EXPORT
        (
          IM_CODE,COL1,COL2,COL3,
          COL4,COL5,COL6,
          COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18 ,COL19,COL20,COL21,COL22,COL23,COL24,
          GENERATE_DATE,USER_ID,UPDATE_SEQ
        )
     SELECT P_IM_CODE,'NEWM' TRX_STS, '-' TA_REF_ID, F_GET_TA_REF(TRX_DATE) TA_REF_NO, to_char(TRX_DATE,'yyyymmdd')TRX_DATE, 
     to_char(TRX_DUE_DATE,'yyyymmdd')TRX_DUE_DATE, M.IM_CODE,P.BR_CODE BROKER_CD, FUND_CODE, 
      STK_CD, DECODE(GL_CODE,'TBE',1,2)BUY_SELL, ROUND(PRICE,6)PRICE, ROUND(QTY)QTY, ROUND(CURR_VALUE,2)CURR_VALUE, ROUND(NET_COMMISION_VALUE,2)NET_COMMISION_VALUE,
      ROUND(DECODE(S.GL_CODE,'TJE',(0.1/100 * CURR_VALUE),0),2)SALES_TAX, 
      ROUND(LEVY,2)LEVY, ROUND(VAT,2)VAT, NULL OTHER_CHARGES,ROUND(S.NET_VALUE,2) GROSS_SETTLEMENT_AMT, ROUND(WITHHOLDING_PPH,2)WITHHOLDING_PPH, 
      ROUND(DECODE(GL_CODE,'TBE',(NET_VALUE-WITHHOLDING_PPH),(NET_VALUE+WITHHOLDING_PPH)),2)NET_SETTLEMENT_AMOUNT, 
      DECODE(GL_CODE,'TJE','1','2')SETTLEMENT_TYPE, '-' REMARKS, '-' CANCEL_REASON,SYSDATE, P_USER_ID,V_UPDATE_SEQ
      FROM stock_transaction S, MST_IM M, MST_FUND_CLIENT C,(
        SELECT DSTR1 AS BR_CODE
        FROM MST_SYS_PARAM
        WHERE PARAM_ID='SINVEST'
        AND PARAM_CD1 ='BR_CODE'
      )
    P
      WHERE M.IM_CODE = C.IM_CODE
      AND C.CLIENT_CD = S.SL_CODE
      AND S.TRX_STATUS='A'
      AND M.APPROVED_STAT='A'
      AND C.APPROVED_STAT='A'
      AND M.IM_CODE   = P_IM_CODE
      AND TRX_DATE    = P_TRX_DATE;
    EXCEPTION
    WHEN OTHERS THEN
      P_ERROR_CODE := -60;
      P_ERROR_MSG  :=SUBSTR('INSERT INTO IM_FILE_EXPORT '|| P_IM_CODE||' '||SQLERRM,1,200);
      RAISE;
    END;
  END IF;
  
  COMMIT;
  P_UPDATE_SEQ :=V_UPDATE_SEQ;
  P_ERROR_CODE :=1;
  P_ERROR_MSG  :='';
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG  :=V_ERROR_MSG;
  RAISE;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE :=-1;
  P_ERROR_MSG  := SUBSTR(SQLERRM,1,200);
END SP_GEN_CSV_IM_NEW;