create or replace PROCEDURE SP_MST_BANK_CUSTODY_UPD(
	P_SEARCH_CBEST_CD		MST_BANK_CUSTODY.CBEST_CD%TYPE,
	P_CBEST_CD		MST_BANK_CUSTODY.CBEST_CD%TYPE,
	P_CUSTODY_NAME		MST_BANK_CUSTODY.CUSTODY_NAME%TYPE,
	P_CUSTODY_ADDR		MST_BANK_CUSTODY.CUSTODY_ADDR%TYPE,
	P_SR_CUSTODY_CD		MST_BANK_CUSTODY.SR_CUSTODY_CD%TYPE,
	P_CTP_CD		MST_BANK_CUSTODY.CTP_CD%TYPE,
	P_CRE_DT		MST_BANK_CUSTODY.CRE_DT%TYPE,
	P_USER_ID		MST_BANK_CUSTODY.USER_ID%TYPE,
	P_UPD_DT		MST_BANK_CUSTODY.UPD_DT%TYPE,
	P_UPD_BY		MST_BANK_CUSTODY.UPD_BY%TYPE,
	P_CONTACT_PERSON		MST_BANK_CUSTODY.CONTACT_PERSON%TYPE,
	P_FAX_NUM		MST_BANK_CUSTODY.FAX_NUM%TYPE,
	P_PHONE_NUM		MST_BANK_CUSTODY.PHONE_NUM%TYPE,
	P_ACCT_NUM		MST_BANK_CUSTODY.ACCT_NUM%TYPE,
	P_UPD_STATUS					T_MANY_DETAIL.UPD_STATUS%TYPE,
	P_IP_ADDRESS					T_MANY_HEADER.IP_ADDRESS%TYPE,
	P_CANCEL_REASON					T_MANY_HEADER.CANCEL_REASON%TYPE,
	P_UPDATE_DATE					T_MANY_HEADER.UPDATE_DATE%TYPE,
	P_UPDATE_SEQ					T_MANY_HEADER.UPDATE_SEQ%TYPE,
	P_RECORD_SEQ					T_MANY_DETAIL.RECORD_SEQ%TYPE,
	P_ERROR_CODE					OUT			NUMBER,
	P_ERROR_MSG						OUT			VARCHAR2
) IS

V_DOC_TYPE 						CHAR(3);

V_ERR EXCEPTION;
V_ERROR_CODE					NUMBER;
V_ERROR_MSG						VARCHAR2(200);
V_TABLE_NAME 					T_MANY_DETAIL.TABLE_NAME%TYPE := 'MST_BANK_CUSTODY';
V_STATUS            			T_MANY_DETAIL.UPD_STATUS%TYPE;
V_TABLE_ROWID					T_MANY_DETAIL.TABLE_ROWID%TYPE;

CURSOR CSR_MANY_DETAIL IS
SELECT  COLUMN_ID, COLUMN_NAME AS FIELD_NAME,
                       DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME =V_TABLE_NAME
AND OWNER = 'IPNEXTG';

CURSOR CSR_TABLE IS
SELECT *
FROM MST_BANK_CUSTODY
WHERE CBEST_CD = P_SEARCH_CBEST_CD;

V_MANY_DETAIL  TYPES.MANY_DETAIL_RC;

V_REC MST_BANK_CUSTODY%ROWTYPE;

I INTEGER;
V_FIELD_CNT NUMBER;
V_PENDING_CNT NUMBER;
VA CHAR(1) := '@';

BEGIN

	IF P_UPD_STATUS = 'I' AND P_SEARCH_CBEST_CD <> P_CBEST_CD THEN
			V_ERROR_CODE := -2001;
			V_ERROR_MSG := 'JIKA INSERT, P_SEARCH_CBEST_CD HARUS SAMA DENGAN P_CBEST_CD';
			RAISE V_ERR;
	END IF;

	BEGIN
		SELECT ROWID INTO V_TABLE_ROWID
		FROM MST_BANK_CUSTODY
		WHERE CBEST_CD = P_SEARCH_CBEST_CD;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_TABLE_ROWID := NULL;
		WHEN OTHERS THEN
			V_ERROR_CODE := -3;
			V_ERROR_MSG :=  SUBSTR('RETRIEVE  '|| V_TABLE_NAME||' FOR '||P_SEARCH_CBEST_CD||SQLERRM,1,200);
			RAISE V_ERR;
	END;
	
      
    IF P_UPD_STATUS = 'I' AND V_TABLE_ROWID IS NOT NULL THEN
    	V_ERROR_CODE := -70;
			V_ERROR_MSG :=  'Duplicated CBEST Code'||P_CBEST_CD;
			RAISE V_ERR;
    END IF;
  
  
	IF V_TABLE_ROWID IS NULL THEN
		BEGIN
			SELECT COUNT(1) INTO V_PENDING_CNT
			FROM T_MANY_DETAIL D, T_MANY_HEADER H
			WHERE D.TABLE_NAME = V_TABLE_NAME
			AND D.UPDATE_DATE = H.UPDATE_DATE
			AND D.UPDATE_SEQ = H.UPDATE_SEQ
			AND D.FIELD_NAME = 'CBEST_CD'
			AND D.FIELD_VALUE = P_SEARCH_CBEST_CD
			AND H.APPROVED_STATUS = 'E';
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				V_PENDING_CNT := 0;
			WHEN OTHERS THEN
				V_ERROR_CODE := -4;
				V_ERROR_MSG :=  SUBSTR('RETRIEVE T_MANY_HEADER FOR '|| V_TABLE_NAME||SQLERRM,1,200);
				RAISE V_ERR;
		END;
    
	ELSE
		BEGIN
			SELECT COUNT(1) INTO V_PENDING_CNT
			FROM T_MANY_HEADER H, T_MANY_DETAIL D
			WHERE D.TABLE_NAME = V_TABLE_NAME
      		AND H.UPDATE_DATE = D.UPDATE_DATE
			AND H.UPDATE_SEQ = D.UPDATE_SEQ
			AND D.TABLE_ROWID = V_TABLE_ROWID
			AND H.APPROVED_STATUS <> 'A'
			AND H.APPROVED_STATUS <> 'R';
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				V_PENDING_CNT := 0;
			WHEN OTHERS THEN
				V_ERROR_CODE := -5;
				V_ERROR_MSG :=  SUBSTR('RETRIEVE T_MANY_HEADER FOR '|| V_TABLE_NAME||SQLERRM,1,200);
				RAISE V_ERR;
			END;
	END IF;

	IF  V_PENDING_CNT > 0 THEN
		V_ERROR_CODE := -6;
		V_ERROR_MSG := 'MASIH ADA YANG BELUM DI-APPROVE CBEST CODE '||P_SEARCH_CBEST_CD;
		RAISE V_ERR;
	END IF;
	
	OPEN CSR_TABLE;
	FETCH CSR_TABLE INTO V_REC;

	OPEN V_MANY_DETAIL FOR
		SELECT P_UPDATE_DATE AS UPDATE_DATE, P_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, P_RECORD_SEQ AS RECORD_SEQ, V_TABLE_ROWID AS TABLE_ROWID, A.FIELD_NAME,  FIELD_TYPE, B.FIELD_VALUE, P_UPD_STATUS AS STATUS,  B.UPD_FLG
		FROM
		(
			SELECT  V_TABLE_NAME AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME, DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
			FROM ALL_TAB_COLUMNS
			WHERE TABLE_NAME =V_TABLE_NAME
			AND OWNER = 'IPNEXTG'
		) A,
		( 
		SELECT  'CBEST_CD'  AS FIELD_NAME, P_CBEST_CD AS FIELD_VALUE, DECODE(TRIM(V_REC.CBEST_CD), TRIM(P_CBEST_CD),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'CUSTODY_NAME'  AS FIELD_NAME, P_CUSTODY_NAME AS FIELD_VALUE, DECODE(TRIM(V_REC.CUSTODY_NAME), TRIM(P_CUSTODY_NAME),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'CUSTODY_ADDR'  AS FIELD_NAME, P_CUSTODY_ADDR AS FIELD_VALUE, DECODE(TRIM(V_REC.CUSTODY_ADDR), TRIM(P_CUSTODY_ADDR),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'SR_CUSTODY_CD'  AS FIELD_NAME, P_SR_CUSTODY_CD AS FIELD_VALUE, DECODE(TRIM(V_REC.SR_CUSTODY_CD), TRIM(P_SR_CUSTODY_CD),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'CTP_CD'  AS FIELD_NAME, P_CTP_CD AS FIELD_VALUE, DECODE(TRIM(V_REC.CTP_CD), TRIM(P_CTP_CD),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'CRE_DT'  AS FIELD_NAME, TO_CHAR(P_CRE_DT,'YYYY/MM/DD HH24:MI:SS')  AS FIELD_VALUE, DECODE(V_REC.CRE_DT, P_CRE_DT,'N','Y') UPD_FLG FROM DUAL
		WHERE P_UPD_STATUS = 'I'
		UNION
		SELECT  'USER_ID'  AS FIELD_NAME, P_USER_ID AS FIELD_VALUE, DECODE(TRIM(V_REC.USER_ID), TRIM(P_USER_ID),'N','Y') UPD_FLG FROM DUAL
		WHERE P_UPD_STATUS = 'I'
		UNION
		SELECT  'UPD_DT'  AS FIELD_NAME, TO_CHAR(P_UPD_DT,'YYYY/MM/DD HH24:MI:SS')  AS FIELD_VALUE, DECODE(V_REC.UPD_DT, P_UPD_DT,'N','Y') UPD_FLG FROM DUAL
		WHERE P_UPD_STATUS = 'U'
		UNION
		SELECT  'UPD_BY'  AS FIELD_NAME, P_UPD_BY AS FIELD_VALUE, DECODE(TRIM(V_REC.UPD_BY), TRIM(P_UPD_BY),'N','Y') UPD_FLG FROM DUAL
		WHERE P_UPD_STATUS = 'U'
		UNION
		SELECT  'CONTACT_PERSON'  AS FIELD_NAME, P_CONTACT_PERSON AS FIELD_VALUE, DECODE(TRIM(V_REC.CONTACT_PERSON), TRIM(P_CONTACT_PERSON),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'FAX_NUM'  AS FIELD_NAME, P_FAX_NUM AS FIELD_VALUE, DECODE(TRIM(V_REC.FAX_NUM), TRIM(P_FAX_NUM),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'PHONE_NUM'  AS FIELD_NAME, P_PHONE_NUM AS FIELD_VALUE, DECODE(TRIM(V_REC.PHONE_NUM), TRIM(P_PHONE_NUM),'N','Y') UPD_FLG FROM DUAL
		UNION
		SELECT  'ACCT_NUM'  AS FIELD_NAME, P_ACCT_NUM AS FIELD_VALUE, DECODE(TRIM(V_REC.ACCT_NUM), TRIM(P_ACCT_NUM),'N','Y') UPD_FLG FROM DUAL
			
		) B
		WHERE A.FIELD_NAME = B.FIELD_NAME
		AND  (P_UPD_STATUS <> 'C' OR (P_UPD_STATUS = 'C' AND A.FIELD_NAME = 'CBEST_CD'));

		 
	IF V_TABLE_ROWID IS NOT NULL THEN
		IF P_UPD_STATUS = 'C' THEN
			V_STATUS := 'C';
		ELSE
			V_STATUS := 'U';
		END IF;
	ELSE
		V_STATUS := 'I';
	END IF;

	BEGIN
		SP_T_MANY_DETAIL_INSERT(P_UPDATE_DATE,   P_UPDATE_SEQ,   V_STATUS, V_TABLE_NAME, P_RECORD_SEQ , V_TABLE_ROWID, V_MANY_DETAIL, V_ERROR_CODE, V_ERROR_MSG);
	EXCEPTION
		WHEN OTHERS THEN
			V_ERROR_CODE := -7;
			V_ERROR_MSG := SUBSTR('SP_T_MANY_DETAIL_INSERT '||V_TABLE_NAME||SQLERRM,1,200);
			RAISE V_ERR;
	END;

	CLOSE V_MANY_DETAIL;
	CLOSE CSR_TABLE;


	IF V_ERROR_CODE < 0 THEN
		V_ERROR_CODE := -8;
		V_ERROR_MSG := 'SP_T_MANY_DETAIL_INSERT '||V_TABLE_NAME||' '||V_ERROR_MSG;
		RAISE V_ERR;
	END IF;

	P_ERROR_CODE := 1;
	P_ERROR_MSG := '';

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		NULL;
	WHEN V_ERR THEN
		ROLLBACK;
		P_ERROR_CODE := V_ERROR_CODE;
		P_ERROR_MSG := V_ERROR_MSG;
	WHEN OTHERS THEN
   -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
		ROLLBACK;
		P_ERROR_CODE := -1;
		P_ERROR_MSG := SUBSTR(SQLERRM(SQLCODE),1,200);
		RAISE;
END SP_MST_BANK_CUSTODY_UPD;