create or replace PROCEDURE SPR_RECONCILE_VD56(
    P_END_DATE DATE,
    P_TYPE VARCHAR2,
    P_USER_ID       VARCHAR2,
    P_GENERATE_DATE DATE,
    P_RANDOM_VALUE OUT NUMBER,
    P_ERROR_CD OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  V_ERROR_MSG    VARCHAR2(200);
  V_ERROR_CD     NUMBER(10);
  v_random_value NUMBER(10);
  V_ERR          EXCEPTION;
  V_BEGIN_DATE DATE;
  V_END_DATE DATE;
BEGIN

  v_random_value := ABS(dbms_random.random);
  
  BEGIN
    Sp_Rpt_Remove_Rand('R_RECONCILE_VD56',V_RANDOM_VALUE,V_ERROR_CD,V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -10;
    V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND '||V_ERROR_MSG||SQLERRM(SQLCODE),1,200);
    RAISE V_err;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -20;
    V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND'||V_ERROR_MSG,1,200);
    RAISE V_ERR;
  END IF;
  
V_BEGIN_DATE := TO_DATE('01'||TO_CHAR(P_END_DATE,'MMYYYY'),'DDMMYYYY');
V_END_DATE :=P_END_DATE;


  BEGIN
    INSERT
    INTO R_RECONCILE_VD56
      (
        MKBD_DATE
,CLIENT_CD
,BANK_CD
,BANK_ACCT_NUM
,ACCT_NAME
,SALDO_10
,SALDO_24
,SELISIH
,USER_ID
,RAND_VALUE
,GENERATE_DATE
        
      )
   --sql reconcile vd56 baris 10 dengan baris 24

SELECT P_END_DATE, C.CLIENT_CD,R.BANK_CD,R.BANK_ACCT_NUM,R.ACCT_NAME,SALDO_10,SALDO_24,SELISIH, P_USER_ID,V_RANDOM_VALUE,P_GENERATE_DATE FROM
(

SELECT CLIENT_CD, SUM(SALDO_10)SALDO_10, SUM(SALDO_24) SALDO_24, SUM(SALDO_10)-SUM(SALDO_24)SELISIH FROM
(
--UNTUK BARIS 10
SELECT CLIENT_CD, SUM(SALDO)SALDO_10, 0 SALDO_24
FROM
  (
    SELECT CLIENT_CD, SUM(MVMT) SALDO
    FROM
      (
        SELECT T_FUND_LEDGER.CLIENT_CD, DECODE( SUBSTR(T_FUND_LEDGER.ACCT_CD,1,1),'D',1,-1) * (T_FUND_LEDGER.DEBIT - T_FUND_LEDGER.CREDIT) MVMT
        FROM T_FUND_LEDGER, MST_MAP_MKBD M, MST_CLIENT
        WHERE T_FUND_LEDGER.CLIENT_CD = MST_CLIENT.CLIENT_CD
        AND T_FUND_LEDGER.DOC_DATE BETWEEN V_BEGIN_DATE AND V_END_DATE
        AND T_FUND_LEDGER.APPROVED_STS = 'A'
        AND T_FUND_LEDGER.ACCT_CD      = TRIM(M.GL_A)
        AND M.SOURCE                   = 'VD56'
        AND M.MKBD_CD                  =10
        AND V_END_DATE BETWEEN M.VER_BGN_DT AND M.VER_END_DT
      )
    GROUP BY CLIENT_CD
    UNION ALL
    SELECT CLIENT_CD, SUM(BEG_BAL) BEG_BAL
    FROM
      (
        SELECT T_FUND_BAL.CLIENT_CD, DECODE( SUBSTR(T_FUND_BAL.ACCT_CD,1,1),'D',1,-1) * (NVL(T_FUND_BAL.DEBIT, 0) - NVL(T_FUND_BAL.CREDIT, 0)) BEG_BAL
        FROM T_FUND_BAL,MST_MAP_MKBD M,MST_CLIENT
        WHERE T_FUND_BAL.CLIENT_CD = MST_CLIENT.CLIENT_CD
        AND T_FUND_BAL.ACCT_CD     = TRIM(M.GL_A)
        AND T_FUND_BAL.BAL_DT      = V_BEGIN_DATE
        AND M.SOURCE               = 'VD56'
        AND M.MKBD_CD              =10
        AND V_END_DATE BETWEEN M.VER_BGN_DT AND M.VER_END_DT
      )
    GROUP BY CLIENT_CD
  )
GROUP BY CLIENT_CD
--ORDER BY CLIENT_CD
UNION ALL
--BARIS 24
SELECT CLIENT_CD, 0 SALDO_10, SUM(AMT)SALDO_24
FROM
  (
    SELECT B.CLIENT_CD, NVL(a.BANK_CD,'KSEI') BANK_CD, DECODE(M.MKBD_CD, 13,'NSBH UMUM','NASABAH') MILIK, DEBIT - CREDIT AMT
    FROM T_FUND_BAL B, MST_MAP_MKBD M, MST_CLIENT_FLACCT a
    WHERE B.BAL_DT = V_BEGIN_DATE
    AND B.ACCT_CD  = TRIM(M.GL_A)
    AND M.source   = 'VD56'
  --  AND m.MKBD_CD BETWEEN 10 AND 12
    AND m.MKBD_CD=10
    AND V_END_DATE BETWEEN M.VER_BGN_DT AND M.VER_END_DT
    AND B.CLIENT_CD = a.CLIENT_CD(+)
    AND B.BAL_DT BETWEEN a.FROM_DT AND a.TO_DT
    AND a.APPROVED_STAT <> 'C'
    UNION ALL
    SELECT D.CLIENT_CD, NVL(H.FUND_BANK_CD,'KSEI') BANK_CD, 'NASABAH' MILIK, DEBIT -CREDIT TRX_AMT
    FROM T_FUND_MOVEMENT H, T_FUND_LEDGER D, MST_MAP_MKBD M, MST_CLIENT_FLACCT a
    WHERE H.DOC_DATE BETWEEN V_BEGIN_DATE AND V_END_DATE
    AND H.APPROVED_STS = 'A'
    AND H.DOC_NUM       = D.DOC_NUM
    AND D.ACCT_CD       = TRIM(M.GL_A)
    AND M.source        = 'VD56'
    --AND m.MKBD_CD BETWEEN 10 AND 12
    AND m.MKBD_CD =10
    AND V_END_DATE BETWEEN M.VER_BGN_DT AND M.VER_END_DT
    AND H.CLIENT_CD      = a.CLIENT_CD(+)
    AND H.FUND_BANK_CD   = NVL(a.BANK_CD, H.FUND_BANK_CD)
    AND a.APPROVED_STAT =  'A'
  )
GROUP BY CLIENT_CD
  )
  GROUP BY CLIENT_CD
  HAVING ((SUM(SALDO_10)<> SUM(SALDO_24)) AND P_TYPE='DIFF' OR P_TYPE='ALL')
  ) C JOIN MST_CLIENT_FLACCT R
  ON C.CLIENT_CD=R.CLIENT_CD;
  --ORDER BY CLIENT_CD;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -30;
    V_ERROR_MSG := SUBSTR('INSERT R_RECONCILE_VD56 '||V_ERROR_MSG||SQLERRM(SQLCODE),1,200);
    RAISE V_err;
  END;
  
  P_RANDOM_VALUE :=V_RANDOM_VALUE;
  P_ERROR_CD     := 1 ;
  P_ERROR_MSG    := '';
  
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_MSG := V_ERROR_MSG;
  P_ERROR_CD  := V_ERROR_CD;
WHEN OTHERS THEN
  P_ERROR_CD  := -1 ;
  P_ERROR_MSG := SUBSTR(SQLERRM(SQLCODE),1,200);
  RAISE;
END SPR_RECONCILE_VD56;