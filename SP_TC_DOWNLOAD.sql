create or replace PROCEDURE SP_TC_DOWNLOAD(
    P_TRX_DATE   DATE,
    P_TRX_STATUS VARCHAR2,
    P_IM_CODE VARCHAR2,
    P_USER_ID    VARCHAR2,
    P_UPDATE_SEQ OUT NUMBER,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  V_SEQ_NAME   VARCHAR2(20):='SEQ_SINVEST';
  v_err        EXCEPTION;
  V_ERROR_CODE NUMBER(5);
  V_ERROR_MSG  VARCHAR2(200);
  V_SQL        VARCHAR2(200);
  V_UPDATE_SEQ NUMBER;
  V_CNT        NUMBER(5);
  
  CURSOR CSR_DATA
  IS
    SELECT DECODE(P_TRX_STATUS,'A','NEWM','CANC') TRANSACTION_STATUS, NULL TC_REFERENCE_ID, T.trx_date TRADE_DATE,
    T.trx_due_date SETTLEMENT_DATE,T.TRX_SEQ_NO, p.BR_CODE, c.IM_CODE, c.FUND_CODE, T.stk_cd SECURITY_CODE,
    DECODE(T.GL_CODE,'TBE','1','2') BUY_SELL, T.PRICE, T.QTY QUANTITY, T.CURR_VALUE TRADE_AMOUNT, 
    T.NET_COMMISION_VALUE COMMISSION, DECODE(T.GL_CODE,'TJE',(0.1/100*T.CURR_VALUE),0)SALES_TAX, T.LEVY, T.VAT, NULL OTHER_CHARGES, 
    T.NET_VALUE GROSS_SETTLEMENT_AMOUNT, T.WITHHOLDING_PPH WHT_ON_COMMISSION, 
    DECODE(GL_CODE,'TBE',(NET_VALUE-WITHHOLDING_PPH),(NET_VALUE+WITHHOLDING_PPH)) NET_SETTLEMENT_AMOUNT,
    T.SL_CODE
    FROM STOCK_TRANSACTION T, MST_FUND_CLIENT C, (
        SELECT DSTR1 AS BR_CODE
        FROM MST_SYS_PARAM
        WHERE PARAM_ID='SINVEST'
        AND PARAM_CD1 ='BR_CODE'
      )
    P, MST_IM M
  WHERE T.SL_CODE   = C.CLIENT_CD
  AND C.IM_CODE = M.IM_CODE
  AND M.APPROVED_STAT='A'
  AND C.APPROVED_STAT='A'
  AND ((T.TRX_STATUS='A'
  AND P_TRX_STATUS  ='A')
  OR(P_TRX_STATUS   ='C'
  AND t.TRX_STATUS <> 'A') )
  AND T.TRX_DATE    =P_TRX_DATE
  AND ((C.IM_CODE = P_IM_CODE) OR P_IM_CODE = '%');

  V_COMMISION NUMBER;
  V_LEVY NUMBER;
  V_VAT NUMBER;
  V_GROSS_SETT_AMT NUMBER;
  V_WHT_ON_COMM NUMBER;
  V_NETT_SETT_AMT NUMBER;
  V_COMMISION_PER NUMBER;
  V_FORMULA NUMBER;
BEGIN

  --CREATE SEQUENCE FOR UPDATE_SEQ IM FILE
  BEGIN
    SELECT COUNT(1) INTO V_CNT FROM ALL_SEQUENCES WHERE SEQUENCE_NAME=V_SEQ_NAME;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-10;
    V_ERROR_MSG :=SUBSTR('CHECK SEQUENCE '||V_SEQ_NAME||'IN ALL_SEQUENCES'||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  IF V_CNT=0 THEN
    v_sql:='CREATE SEQUENCE '||V_SEQ_NAME ||' INCREMENT BY 1 START WITH 1 MAXVALUE 999999 NOCACHE nocycle';
    BEGIN
      EXECUTE IMMEDIATE V_SQL;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-20;
      V_ERROR_MSG :=SUBSTR('CREATE SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  
  BEGIN
    SELECT COUNT(1), MAX(UPDATE_SEQ)
    INTO V_CNT, V_UPDATE_SEQ
    FROM TC_DOWNLOAD
    WHERE TRADE_DATE=P_TRX_DATE;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-40;
    V_ERROR_MSG :=SUBSTR('SELECT FROM TC_DOWNLOAD '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
    

IF P_TRX_STATUS='A' THEN
  
  IF V_UPDATE_SEQ IS NULL THEN
    V_SQL         := 'SELECT '||V_SEQ_NAME||'.NEXTVAL FROM DUAL';
    BEGIN
      EXECUTE IMMEDIATE V_SQL INTO V_UPDATE_SEQ;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-30;
      V_ERROR_MSG :=SUBSTR('SELECT SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  

  
    FOR REC IN CSR_DATA
    LOOP
      BEGIN
        SELECT COUNT(1)
        INTO V_CNT
        FROM TC_DOWNLOAD
        WHERE TRADE_DATE=P_TRX_DATE
        AND TRX_SEQ_NO  =REC.TRX_SEQ_NO;
      EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE:=-40;
        V_ERROR_MSG :=SUBSTR('SELECT FROM TC_DOWNLOAD '||SQLERRM,1,200);
        RAISE V_ERR;
      END;
      
      IF V_CNT=0 THEN
      
      --[INDRA] EXCEPTION UNTUK SCHRODER 13 NOV 2017
      IF REC.IM_CODE='SCH02' THEN

        --get commisio_per from mst_client
          BEGIN
          SELECT COMMISSION_PER INTO V_COMMISION_PER FROM MST_CLIENT WHERE CLIENT_CD=REC.SL_CODE;
      EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE:=-40;
        V_ERROR_MSG :=SUBSTR('SELECT COMMISSION_PER FROM mst_client '||SQLERRM,1,200);
        RAISE V_ERR;
      END;

          V_FORMULA := ((V_COMMISION_PER/100)/100 - (0.043/100) ) /1.1;

          V_COMMISION :=ROUND(ROUND(V_FORMULA,6) * REC.TRADE_AMOUNT,2);
          V_LEVY :=ROUND(0.00043 * REC.TRADE_AMOUNT);
          V_VAT :=ROUND(V_COMMISION * 0.1);
          V_WHT_ON_COMM := ROUND(0.02 * V_COMMISION);
            IF REC.BUY_SELL = 1 THEN
                V_GROSS_SETT_AMT := REC.TRADE_AMOUNT + V_COMMISION + V_LEVY + V_VAT;
                V_NETT_SETT_AMT := REC.TRADE_AMOUNT + V_COMMISION + V_LEVY + V_VAT - V_WHT_ON_COMM;
            ELSE
                V_GROSS_SETT_AMT := REC.TRADE_AMOUNT - V_COMMISION - V_LEVY - V_VAT - REC.SALES_TAX;
                V_NETT_SETT_AMT := REC.TRADE_AMOUNT - V_COMMISION - V_LEVY - V_VAT - REC.SALES_TAX + V_WHT_ON_COMM;
            END IF;
          
      ELSE
          V_COMMISION :=REC.COMMISSION;
          V_LEVY :=REC.LEVY;
          V_VAT :=REC.VAT;
          V_GROSS_SETT_AMT := REC.GROSS_SETTLEMENT_AMOUNT;
          V_WHT_ON_COMM := REC.WHT_ON_COMMISSION;
          V_NETT_SETT_AMT := REC.NET_SETTLEMENT_AMOUNT;
      END IF;
            ---END 13/11/2017 SCH02
      
        BEGIN
          INSERT
          INTO TC_DOWNLOAD
            (
              TRANSACTION_STATUS ,TC_REFERENCE_ID ,TRADE_DATE ,SETTLEMENT_DATE ,TRX_SEQ_NO ,BR_CODE ,
              IM_CODE ,FUND_CODE ,SECURITY_CODE ,BUY_SELL ,PRICE ,QUANTITY ,TRADE_AMOUNT ,
              COMMISSION ,SALES_TAX ,LEVY ,VAT ,OTHER_CHARGES ,GROSS_SETTLEMENT_AMOUNT ,WHT_ON_COMMISSION ,
              NET_SETTLEMENT_AMOUNT ,TC_REFERENCE_NO ,GENERATE_DATE ,USER_ID ,UPDATE_SEQ
            )
            VALUES
            (
              REC.TRANSACTION_STATUS, REC.TC_REFERENCE_ID, REC.TRADE_DATE, REC.SETTLEMENT_DATE,REC.TRX_SEQ_NO, REC.BR_CODE, 
              REC.IM_CODE, REC.FUND_CODE, REC.SECURITY_CODE, REC.BUY_SELL, REC.PRICE, REC.QUANTITY, REC.TRADE_AMOUNT,
              V_COMMISION, ROUND(REC.SALES_TAX), V_LEVY, V_VAT, REC.OTHER_CHARGES, ROUND(V_GROSS_SETT_AMT), ROUND(V_WHT_ON_COMM),
              ROUND(V_NETT_SETT_AMT), F_GET_TD_REF_NO(REC.TRADE_DATE), SYSDATE , P_USER_ID, V_UPDATE_SEQ
            );
        EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE:=-40;
          V_ERROR_MSG :=SUBSTR('INSERT INTO TC_DOWNLOAD '||SQLERRM,1,200);
          RAISE V_ERR;
        END;
      END IF;--END V_CNT=0
    END LOOP;--END LOOP CSR_DATA
  END IF;
  
  COMMIT;
  
  P_UPDATE_SEQ :=V_UPDATE_SEQ;
  P_ERROR_CODE :=1;
  P_ERROR_MSG  :='';
  
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG  :=V_ERROR_MSG;
  RAISE;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE :=-1;
  P_ERROR_MSG  := SUBSTR(SQLERRM,1,200);
END SP_TC_DOWNLOAD;