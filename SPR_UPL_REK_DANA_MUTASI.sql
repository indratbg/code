create or replace 
procedure SPR_UPL_REK_DANA_MUTASI(P_TANGGALTIMESTAMP RPT_UPL_REK_DANA_MUTASI.TANGGALTIMESTAMP%TYPE,
									P_FROMBANK RPT_UPL_REK_DANA_MUTASI.FROMBANK%TYPE,
									P_INSTRUCTIONFROM RPT_UPL_REK_DANA_MUTASI.INSTRUCTIONFROM%TYPE,
									P_RDN RPT_UPL_REK_DANA_MUTASI.RDN%TYPE,
									P_BRANCH RPT_UPL_REK_DANA_MUTASI.BRANCH%TYPE,
									P_CLIENT_CD RPT_UPL_REK_DANA_MUTASI.CLIENT_CD%TYPE,
									P_CLIENT_NAME RPT_UPL_REK_DANA_MUTASI.CLIENT_NAME%TYPE,
									P_BEGINNINGBALANCE RPT_UPL_REK_DANA_MUTASI.BEGINNINGBALANCE%TYPE,
									P_TRANSACTIONVALUE RPT_UPL_REK_DANA_MUTASI.TRANSACTIONVALUE%TYPE,
									P_CLOSINGBALANCE RPT_UPL_REK_DANA_MUTASI.CLOSINGBALANCE%TYPE,
									P_JOURNAL RPT_UPL_REK_DANA_MUTASI.JOURNAL%TYPE,
									P_RAND_VALUE   RPT_UPL_REK_DANA_MUTASI.RAND_VALUE%TYPE,
									P_GENERATE_DATE RPT_UPL_REK_DANA_MUTASI.GENERATE_DATE%TYPE,
									P_USER_ID RPT_UPL_REK_DANA_MUTASI.USER_ID%TYPE,
									P_ERROR_CD OUT NUMBER,
									P_ERROR_MSG OUT VARCHAR2
									)
IS

V_ERR EXCEPTION;
--V_random_value	NUMBER(10);
V_ERROR_CD NUMBER(5);
V_ERROR_MSG VARCHAR2(200);
BEGIN
 -- v_random_value := abs(dbms_random.random);
/*
    BEGIN
        SP_RPT_REMOVE_RAND('RPT_UPL_REK_DANA_MUTASI',v_random_value,V_ERROR_CD,V_ERROR_MSG);
    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR_CD := -2;
            V_ERROR_MSG := SQLERRM(SQLCODE);
            RAISE V_ERR;
    END;
*/
	BEGIN
	INSERT INTO RPT_UPL_REK_DANA_MUTASI(TANGGALTIMESTAMP,FROMBANK,INSTRUCTIONFROM,RDN,BRANCH,
										CLIENT_CD,CLIENT_NAME,BEGINNINGBALANCE,TRANSACTIONVALUE,CLOSINGBALANCE,
										JOURNAL,RAND_VALUE,GENERATE_DATE,USER_ID)VALUES
										(P_TANGGALTIMESTAMP,P_FROMBANK,P_INSTRUCTIONFROM,P_RDN,P_BRANCH,
										P_CLIENT_CD,P_CLIENT_NAME,P_BEGINNINGBALANCE,P_TRANSACTIONVALUE,P_CLOSINGBALANCE,
										P_JOURNAL, p_rand_value,P_GENERATE_DATE,P_USER_ID);
	EXCEPTION
        WHEN OTHERS THEN
            V_ERROR_CD := -3;
            V_ERROR_MSG := SQLERRM(SQLCODE);
            RAISE V_ERR;
    END;	

	P_ERROR_CD :=1;
	P_ERROR_MSG :='';
--	P_RAND_VALUE := V_random_value;
 COMMIT;
EXCEPTION
    WHEN V_ERR THEN
        ROLLBACK;
        --V_random_value := 0;
		P_ERROR_CD :=V_ERROR_CD;
		P_ERROR_MSG := SUBSTR(V_ERROR_MSG,1,200);
    WHEN OTHERS THEN
        ROLLBACK;
        --P_rand_value := 0;
        P_ERROR_CD := -1;
        P_ERROR_MSG := SUBSTR(SQLERRM(SQLCODE),1,200);
END  SPR_UPL_REK_DANA_MUTASI;