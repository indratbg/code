create or replace PROCEDURE SPR_TENDER_OFFER(
    P_PAYMENT_DATE  DATE,
    P_STK_CD        VARCHAR2,
    P_FEE_PERC      NUMBER,
    P_ROUNDING VARCHAR2,
    P_ROUND_POINT NUMBER,
    P_USER_ID       VARCHAR2,
    P_GENERATE_DATE DATE,
    P_RAND_VALUE OUT NUMBER,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  V_ERROR_CODE      NUMBER(5);
  V_ERROR_MSG       VARCHAR2(200);
  V_ERR             EXCEPTION;
  V_RANDOM_VALUE    NUMBER(10);
  V_BGN_BAL         DATE;
  V_BEG_BAL         NUMBER;
  V_DDMMYYYY        VARCHAR2(8);
  V_RUNNING_BALANCE NUMBER;

  CURSOR CSR_DATA IS
   SELECT MAX(JUR_TYPE)JUR_TYPE, MAX(STK_CD)STK_CD, MAX(DOC_DT)DOC_DT,T.CLIENT_CD, M.CLIENT_NAME, B.BRCH_CD,B.BRCH_NAME,
    SUM(WITHDRAWN_SHARE_QTY)WITHDRAWN_SHARE_QTY , MAX(PRICE)PRICE, SUM(WITHDRAWN_SHARE_QTY * PRICE) GROSS, P_FEE_PERC FEE_PERC, 
    SUM(WITHDRAWN_SHARE_QTY * PRICE * P_FEE_PERC / 100) FEE_AMT, SUM(WITHDRAWN_SHARE_QTY * PRICE * ( 100 - P_FEE_PERC) / 100) NET_AMT,
    MIN(t.cre_dt)-1/86400 cre_dt
    FROM T_STK_MOVEMENT T
    JOIN MST_CLIENT M
    ON M.CLIENT_CD=T.CLIENT_CD
    JOIN MST_BRANCH B
    ON TRIM(M.BRANCH_CODE)=B.BRCH_CD
    WHERE DOC_DT BETWEEN P_PAYMENT_DATE-30 AND P_PAYMENT_DATE
    AND STK_CD          = P_STK_CD
    AND GL_ACCT_CD      = '12'
    AND DOC_STAT        = '2'
    AND JUR_TYPE        = 'TOFFSELL'
    GROUP BY T.CLIENT_CD, M.CLIENT_NAME, B.BRCH_CD,B.BRCH_NAME;

    V_GROSS NUMBER;
    V_FEE_AMT NUMBER;
    V_NET_AMT NUMBER;
BEGIN

  V_RANDOM_VALUE := ABS(DBMS_RANDOM.RANDOM);
  
  BEGIN
    SP_RPT_REMOVE_RAND('R_TENDER_OFFER',V_RANDOM_VALUE,V_ERROR_MSG,V_ERROR_CODE);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE := -10;
    V_ERROR_MSG  := SUBSTR('SP_RPT_REMOVE_RAND '||V_ERROR_MSG||SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CODE <0 THEN
    V_ERROR_CODE := -20;
    V_ERROR_MSG  := SUBSTR('SP_RPT_REMOVE_RAND'||V_ERROR_MSG,1,200);
    RAISE V_ERR;
  END IF;
  
  FOR REC IN CSR_DATA LOOP

  IF P_ROUNDING = 'CEIL' THEN
    V_GROSS := CEIL(REC.GROSS);
    V_FEE_AMT := CEIL(REC.FEE_AMT);
    V_NET_AMT :=CEIL(REC.NET_AMT);
  ELSIF P_ROUNDING ='ROUND' THEN
    V_GROSS := ROUND(REC.GROSS,P_ROUND_POINT);
    V_FEE_AMT := ROUND(REC.FEE_AMT,P_ROUND_POINT);
    V_NET_AMT :=ROUND(REC.NET_AMT,P_ROUND_POINT);
  ELSE
    V_GROSS := FLOOR(REC.GROSS);
    V_FEE_AMT := FLOOR(REC.FEE_AMT);
    V_NET_AMT :=FLOOR(REC.NET_AMT);
  END IF;

  BEGIN
    INSERT
    INTO R_TENDER_OFFER
      (
        JUR_TYPE, STK_CD, DOC_DT, CLIENT_CD,CLIENT_NAME, BRANCH_CODE, BRANCH_NAME, 
        WITHDRAWN_SHARE_QTY, PRICE, GROSS, FEE_PERC, FEE_AMT, NET_AMT, RAND_VALUE, USER_ID, GENERATE_DATE,PAYMENT_DATE, ROUNDING, ROUND_POINT,
        mvmt_cre_dt
      )
   VALUES(REC.JUR_TYPE,REC.STK_CD,REC.DOC_DT,REC.CLIENT_CD,REC.CLIENT_NAME,REC.BRCH_CD,REC.BRCH_NAME,
    REC.WITHDRAWN_SHARE_QTY,REC.PRICE,V_GROSS,REC.FEE_PERC,V_FEE_AMT,V_NET_AMT, V_RANDOM_VALUE,P_USER_ID,P_GENERATE_DATE,P_PAYMENT_DATE, P_ROUNDING,P_ROUND_POINT,
    rec.cre_dt);
    
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE := -30;
    V_ERROR_MSG  := SUBSTR('INSERT R_TENDER_OFFER '||SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  END LOOP;
  COMMIT;
  
  P_ERROR_CODE :=1;
  P_ERROR_MSG  :='';
  P_RAND_VALUE :=V_RANDOM_VALUE;
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG  :=V_ERROR_MSG;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE:=-1;
  P_ERROR_MSG :=SUBSTR(SQLERRM,1,200);
  RAISE;
END SPR_TENDER_OFFER;