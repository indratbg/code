create or replace PROCEDURE SPR_CASHFLOW_HARIAN(P_REP_DATE DATE,
  P_USER_ID VARCHAR2,
  P_GENERATE_DATE DATE,
  P_RAND_VALUE OUT NUMBER,
  P_ERROR_CODE OUT NUMBER,
  P_ERROR_MSG OUT VARCHAR2)
IS


V_RANDOM_VALUE NUMBER(10,0);
V_ERR EXCEPTION;
V_ERROR_CODE NUMBER;
V_ERROR_MSG VARCHAR2(200);
V_BEG_BAL_BANK NUMBER;
V_BGN_BAL_DATE DATE;
V_REAL_BALANCE_BANK NUMBER:=0;
V_EST_BALANCE_BANK NUMBER:=0;
--i integer :=1;
V_REAL_MASUK NUMBER;
V_REAL_KELUAR NUMBER;
V_EST_MASUK NUMBER;
V_EST_KELUAR NUMBER;
V_EST_MASUK_RDN NUMBER;
V_EST_MASUK_NSB NUMBER;
V_DATE_T0 DATE;
V_DATE_T3 DATE;
I INTEGER :=1;

V_REAL_MASUK_T0 NUMBER :=0;
V_REAL_MASUK_T1 NUMBER :=0;
V_REAL_MASUK_T2 NUMBER :=0;
V_REAL_MASUK_T3 NUMBER :=0;
V_REAL_KELUAR_T0 NUMBER:=0;
V_REAL_KELUAR_T1 NUMBER:=0;
V_REAL_KELUAR_T2 NUMBER:=0;
V_REAL_KELUAR_T3 NUMBER:=0;

V_EST_MASUK_T0 NUMBER :=0;
V_EST_MASUK_T1 NUMBER :=0;
V_EST_MASUK_T2 NUMBER :=0;
V_EST_MASUK_T3 NUMBER :=0;
V_EST_KELUAR_T0 NUMBER :=0;
V_EST_KELUAR_T1 NUMBER :=0;
V_EST_KELUAR_T2 NUMBER :=0;
V_EST_KELUAR_T3 NUMBER :=0;

V_REAL_BAL_T0 NUMBER:=0;
V_REAL_BAL_T1 NUMBER:=0;
V_REAL_BAL_T2 NUMBER:=0;
V_REAL_BAL_T3 NUMBER:=0;

V_EST_BAL_T0 NUMBER:=0;
V_EST_BAL_T1 NUMBER:=0;
V_EST_BAL_T2 NUMBER:=0;
V_EST_BAL_T3 NUMBER:=0;

CURSOR CSR_DATA IS
select ORDER_NO,KATEGORI,DESCRIPTION,MAIN_KATEGORI,SESI,ORDER_GROUP from T_CASH_FLOW_KATEGORI;

CURSOR CSR_JUR_EX IS
SELECT A.XN_DOC_NUM, B.PAYREC_NUM
FROM
  (
    SELECT XN_DOC_NUM, T_ACCOUNT_LEDGER.DOC_DATE, CLIENT_CD, CURR_VAL
    FROM T_ACCOUNT_LEDGER, T_PAYRECH, MST_GLA_TRX G
    WHERE DOC_DATE                       BETWEEN V_DATE_T0 AND V_DATE_T3
    AND t_account_ledger.due_date        BETWEEN V_DATE_T0 AND V_DATE_T3
    AND TRIM(T_ACCOUNT_LEDGER.GL_ACCT_CD) = G.GL_A
    AND G.JUR_TYPE='BANK'
    AND RECORD_SOURCE   = 'PD'
    AND XN_DOC_NUM = PAYREC_NUM
    AND CLIENT_CD IS NOT NULL
    AND TRIM(T_PAYRECH.ACCT_TYPE)= 'RDM'
  )
  A, (
    SELECT PAYREC_NUM, T_ACCOUNT_LEDGER.DOC_DATE, CLIENT_CD, CURR_VAL
    FROM T_ACCOUNT_LEDGER, T_PAYRECH, MST_GLA_TRX G
    WHERE DOC_DATE                        BETWEEN V_DATE_T0 AND V_DATE_T3
    AND TRIM(T_ACCOUNT_LEDGER.GL_ACCT_CD) = G.GL_A
    AND G.JUR_TYPE='BANK'
    AND t_account_ledger.due_date         BETWEEN V_DATE_T0 AND V_DATE_T3
    AND RECORD_SOURCE   = 'RV'
    AND XN_DOC_NUM  = PAYREC_NUM
    AND CLIENT_CD IS NOT NULL
    AND TRIM(T_PAYRECH.ACCT_TYPE) = 'RDI'
  )
  B
WHERE A.DOC_DATE = B.DOC_DATE
AND A.CLIENT_CD  = B.CLIENT_CD
AND A.CURR_VAL   = B.CURR_VAL;

CURSOR CSR_REPORT IS
SELECT *
FROM R_CASHFLOW_HARIAN 
WHERE RAND_VALUE=V_RANDOM_VALUE 
AND USER_ID=P_USER_ID
AND KATEGORI <> '00'
ORDER BY REP_DATE,ORDER_GROUP,SESI,ORDER_NO;

BEGIN

    V_RANDOM_VALUE :=ABS(DBMS_RANDOM.RANDOM);
    
    BEGIN
      SP_RPT_REMOVE_RAND('R_CASH_FLOW_HARIAN',V_RANDOM_VALUE,V_ERROR_MSG,V_ERROR_CODE);
    EXCEPTION
    WHEN OTHERS THEN
        V_ERROR_CODE  := -3;
        V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND '||V_ERROR_MSG||SQLERRM(SQLCODE),1,200);
        RAISE V_ERR;
    END;
    
    
    IF V_ERROR_CODE  < 0 THEN
      V_ERROR_CODE  := -4;
      V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND'||V_ERROR_MSG,1,200);
      RAISE V_ERR;
    END IF;


    --GET BEGINNING BALANCE DATE
    V_BGN_BAL_DATE := P_REP_DATE-TO_CHAR(P_REP_DATE,'DD')+1;
    V_DATE_T0 :=P_REP_DATE;
    V_DATE_T3 := GET_DUE_DATE(3,P_REP_DATE);

    --EXCLUDE JOURNAL
    FOR REC IN CSR_JUR_EX  LOOP
        BEGIN
          INSERT
          INTO TEMP_DAILY_CASH_FLOW(XN_DOC_NUM, RAND_VALUE, USER_ID)
            VALUES(REC.XN_DOC_NUM, V_RANDOM_VALUE, P_USER_ID) ;
        EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE := -12;
          V_ERROR_MSG  := SUBSTR('INSERT XN_DOC_NUM TEMP_DAILY_CASH_FLOW '||SQLERRM(SQLCODE), 1, 200) ;
          RAISE V_ERR;
        END;
          
        BEGIN
          INSERT
          INTO TEMP_DAILY_CASH_FLOW(XN_DOC_NUM, RAND_VALUE, USER_ID)
            VALUES(REC.PAYREC_NUM, V_RANDOM_VALUE, P_USER_ID) ;
        EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE := -13;
          V_ERROR_MSG  := SUBSTR('INSERT PAYREC_NUM TEMP_DAILY_CASH_FLOW '||SQLERRM(SQLCODE), 1, 200) ;
          RAISE V_ERR;
        END;

    END LOOP;

    --UNTUK REPO
    BEGIN
    INSERT INTO TEMP_DAILY_CASH_FLOW
      (
        XN_DOC_NUM, RAND_VALUE, USER_ID
      )
    SELECT DECODE(B.BARIS,1,DOC_NUM,2,DOC_REF_NUM,RVPV_NUMBER) DOC_NUM, V_RANDOM_VALUE,P_USER_ID FROM 
    (
      SELECT A.DOC_NUM, A.DOC_REF_NUM, T.RVPV_NUMBER, T.RECORD_SOURCE FROM
        (
            select B.DOC_NUM,B.DOC_REF_NUM from IPNEXTG.t_repo a join IPNEXTG.t_repo_vch b on a.repo_num=b.repo_num
            where a.approved_stat='A'
            AND B.APPROVED_STAT='A'
            AND SUBSTR(B.DOC_REF_NUM,5,2) IN('PD','RD')
            AND A.DUE_DATE BETWEEN V_DATE_T0 AND V_DATE_T3
            AND B.DOC_DT BETWEEN V_DATE_T0 AND V_DATE_T3
        )A JOIN T_ACCOUNT_LEDGER T ON A.DOC_NUM=T.XN_DOC_NUM
      WHERE T.APPROVED_STS='A'
      AND REVERSAL_JUR='N'
      AND T.RECORD_SOURCE IN ('RVO','PVO')
    ) N, 
    (SELECT 1 BARIS FROM DUAL
    UNION
    SELECT 2 BARIS FROM DUAL
    UNION
    SELECT 3 BARIS FROM DUAL
    )B;
  EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE := -13;
          V_ERROR_MSG  := SUBSTR('INSERT PAYREC_NUM TEMP_DAILY_CASH_FLOW '||SQLERRM(SQLCODE), 1, 200) ;
          RAISE V_ERR;
        END;



    BEGIN        
    SP_CASHFLOW_REAL(
        P_REP_DATE,
        P_USER_ID,
        V_RANDOM_VALUE,
        V_ERROR_CODE,
        V_ERROR_MSG);
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-20;
      V_ERROR_MSG :=SUBSTR('CALL SP_CASH_FLOW_REAL '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    IF V_ERROR_CODE<0 THEN
      V_ERROR_CODE :=-25;
      V_ERROR_MSG := SUBSTR('CALL SP_CASH_FLOW_REAL '||V_ERROR_MSG,1,200);
      RAISE V_ERR;
    END IF;

    BEGIN        
    SP_CASHFLOW_ESTIMASI(
        P_REP_DATE,
        P_USER_ID,
        V_RANDOM_VALUE,
        V_ERROR_CODE,
        V_ERROR_MSG);
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-30;
      V_ERROR_MSG :=SUBSTR('CALL SP_CASH_FLOW_ESTIMASI '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    IF V_ERROR_CODE<0 THEN
      V_ERROR_CODE :=-35;
      V_ERROR_MSG := SUBSTR('CALL SP_CASH_FLOW_ESTIMASI '||V_ERROR_MSG,1,200);
      RAISE V_ERR;
    END IF;

       

    FOR REC IN CSR_DATA LOOP

            --REAL
              BEGIN
                SELECT MASUK_T0,KELUAR_T0,MASUK_T1,KELUAR_T1,MASUK_T2,KELUAR_T2,MASUK_T3,KELUAR_T3 
                INTO V_REAL_MASUK_T0,V_REAL_KELUAR_T0,V_REAL_MASUK_T1,V_REAL_KELUAR_T1,V_REAL_MASUK_T2,V_REAL_KELUAR_T2,
                V_REAL_MASUK_T3,V_REAL_KELUAR_T3 FROM TMP_CASHFLOW_REAL
                WHERE RAND_VALUE=V_RANDOM_VALUE 
                AND USER_ID=P_USER_ID 
                AND KATEGORI=REC.KATEGORI;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    V_REAL_MASUK_T0 :=0;
                    V_REAL_MASUK_T1 :=0;
                    V_REAL_MASUK_T2 :=0;
                    V_REAL_MASUK_T3 :=0;
                    V_REAL_KELUAR_T0 :=0;
                    V_REAL_KELUAR_T1 :=0;
                    V_REAL_KELUAR_T2 :=0;
                    V_REAL_KELUAR_T3 :=0;
                WHEN OTHERS THEN
                    V_ERROR_CODE:=-40;
                    V_ERROR_MSG :=SUBSTR('SELECT FROM  TMP_CASHFLOW_REAL '||SQLERRM,1,200);
                    RAISE V_ERR;
              END;
              
              --ESTIMASI
                 BEGIN
                SELECT MASUK_T0,KELUAR_T0,MASUK_T1,KELUAR_T1,MASUK_T2,KELUAR_T2,MASUK_T3,KELUAR_T3 
                INTO V_EST_MASUK_T0,V_EST_KELUAR_T0,V_EST_MASUK_T1,V_EST_KELUAR_T1,V_EST_MASUK_T2,V_EST_KELUAR_T2,
                V_EST_MASUK_T3,V_EST_KELUAR_T3 FROM TMP_CASHFLOW_EST
                WHERE RAND_VALUE=V_RANDOM_VALUE 
                AND USER_ID=P_USER_ID 
                AND KATEGORI=REC.KATEGORI;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    V_EST_MASUK_T0 :=0;
                    V_EST_MASUK_T1 :=0;
                    V_EST_MASUK_T2 :=0;
                    V_EST_MASUK_T3 :=0;
                    V_EST_KELUAR_T0 :=0;
                    V_EST_KELUAR_T1 :=0;
                    V_EST_KELUAR_T2 :=0;
                    V_EST_KELUAR_T3 :=0;
                WHEN OTHERS THEN
                    V_ERROR_CODE:=-50;
                    V_ERROR_MSG :=SUBSTR('SELECT FROM  TMP_CASHFLOW_EST '||SQLERRM,1,200);
                    RAISE V_ERR;
              END;
              
              --UNTUK OUTSTANDING
              IF REC.KATEGORI NOT IN ('RMBNSB','RRBNSB','TBNSB') THEN
              
                  --ESTIMASI T0
                  IF SIGN(V_EST_MASUK_T0 - V_REAL_MASUK_T0)=1 THEN
                      V_EST_MASUK_T0 := V_EST_MASUK_T0 - V_REAL_MASUK_T0;
                  ELSE
                      V_EST_MASUK_T0:=0;
                  END IF;
                  --ESTIMASI T1
                  IF SIGN(V_EST_MASUK_T1 - V_REAL_MASUK_T1)=1 THEN
                      V_EST_MASUK_T1 := V_EST_MASUK_T1 - V_REAL_MASUK_T1;
                  ELSE
                      V_EST_MASUK_T1:=0;
                  END IF;
                  --ESTIMASI T2
                  IF SIGN(V_EST_MASUK_T2 - V_REAL_MASUK_T2)=1 THEN
                      V_EST_MASUK_T2 := V_EST_MASUK_T2 - V_REAL_MASUK_T2;
                  ELSE
                      V_EST_MASUK_T2:=0;
                  END IF;
                  --ESTIMASI T3
                  IF SIGN(V_EST_MASUK_T3 - V_REAL_MASUK_T3)=1 THEN
                      V_EST_MASUK_T3 := V_EST_MASUK_T3 - V_REAL_MASUK_T3;
                  ELSE
                      V_EST_MASUK_T3:=0;
                  END IF;
                  
              END IF;
              
              --INSERT R_CASHFLOW_HARIAN
              BEGIN
              INSERT INTO R_CASHFLOW_HARIAN(REP_DATE,ORDER_GROUP,ORDER_NO,MAIN_KATEGORI,KATEGORI,SESI,DESCRIPTION,
                REAL_MASUK_T0,REAL_KELUAR_T0,REAL_BALANCE_T0,EST_MASUK_T0,EST_KELUAR_T0,EST_BALANCE_T0,
                REAL_MASUK_T1,REAL_KELUAR_T1,REAL_BALANCE_T1,EST_MASUK_T1,EST_KELUAR_T1,EST_BALANCE_T1,
                REAL_MASUK_T2,REAL_KELUAR_T2,REAL_BALANCE_T2,EST_MASUK_T2,EST_KELUAR_T2,EST_BALANCE_T2,
                REAL_MASUK_T3,REAL_KELUAR_T3,REAL_BALANCE_T3,EST_MASUK_T3,EST_KELUAR_T3,EST_BALANCE_T3,
                RAND_VALUE,USER_ID,GENERATE_DATE)
              VALUES(P_REP_DATE,REC.ORDER_GROUP,REC.ORDER_NO,REC.MAIN_KATEGORI,REC.KATEGORI,REC.SESI,REC.DESCRIPTION,
                V_REAL_MASUK_T0,V_REAL_KELUAR_T0,0,V_EST_MASUK_T0,V_EST_KELUAR_T0,0,
                V_REAL_MASUK_T1,V_REAL_KELUAR_T1,0,V_EST_MASUK_T1,V_EST_KELUAR_T1,0,
                V_REAL_MASUK_T2,V_REAL_KELUAR_T2,0,V_EST_MASUK_T2,V_EST_KELUAR_T2,0,
                V_REAL_MASUK_T3,V_REAL_KELUAR_T3,0,V_EST_MASUK_T3,V_EST_KELUAR_T3,0,
                V_RANDOM_VALUE,P_USER_ID,P_GENERATE_DATE);
              EXCEPTION
              WHEN OTHERS THEN
                V_ERROR_CODE:=-60;
                V_ERROR_MSG :=SUBSTR('INSERT INTO R_CASHFLOW_HARIAN '||SQLERRM,1,200);
                RAISE V_ERR;
              END;
              
              
    END LOOP;
      

      --GET BEGINNING BALANCE BANK
        BEGIN
        SELECT SUM(NVL(beg_bal, 0))  INTO V_REAL_BAL_T0
           FROM
            ( SELECT SUM(NVL(b.deb_obal, 0) - NVL(b.cre_obal, 0)) BEG_BAL
                FROM t_day_trs b, MST_GLA_TRX G
                WHERE b.trs_dt           = V_BGN_BAL_DATE
                AND trim(b.gl_acct_cd) = G.GL_A
                AND G.JUR_TYPE='BANK'
              UNION ALL
              SELECT     DECODE(d.db_cr_flg, 'D', 1, - 1) * NVL(d.curr_val, 0) MVMT_AMT
                FROM t_account_ledger d,  MST_GLA_TRX G
                WHERE d.doc_date BETWEEN V_BGN_BAL_DATE AND(P_REP_DATE - 1)
                AND trim(d.gl_acct_cd) = G.GL_A
                AND G.JUR_TYPE='BANK'
                AND d.approved_sts     = 'A'
            ) ;
        EXCEPTION
        WHEN OTHERS THEN
            V_ERROR_CODE := -65;
            V_ERROR_MSG  := SUBSTR('SELECT BEGINNING BALANCE YESTERDAY '||SQLERRM(SQLCODE), 1, 200) ;
            RAISE V_err;
        END;
        

    V_REAL_BALANCE_BANK :=V_BEG_BAL_BANK;
    V_EST_BALANCE_BANK :=V_BEG_BAL_BANK;

    BEGIN
    INSERT INTO R_CASHFLOW_HARIAN(REP_DATE,ORDER_GROUP,ORDER_NO,MAIN_KATEGORI,KATEGORI,SESI,DESCRIPTION,
                REAL_BALANCE_T0,EST_BALANCE_T0,
                REAL_BALANCE_T1,EST_BALANCE_T1,
                REAL_BALANCE_T2,EST_BALANCE_T2,
                REAL_BALANCE_T3,EST_BALANCE_T3,
                RAND_VALUE,USER_ID,GENERATE_DATE)
    VALUES(P_REP_DATE,1 ,1 ,'BANK' ,'BEG',1 ,'SALDO AWAL' ,
        V_REAL_BAL_T0,V_REAL_BAL_T0,
        V_REAL_BAL_T1,V_EST_BAL_T1,
        V_REAL_BAL_T2,V_EST_BAL_T2,
        V_REAL_BAL_T3,V_EST_BAL_T3,
        V_RANDOM_VALUE,P_USER_ID,P_GENERATE_DATE);
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-70;
      V_ERROR_MSG :=SUBSTR('INSERT INTO R_CASHFLOW_HARIAN SALDO AWAL '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    --UPDATE BALANCE T0  
        FOR REC IN CSR_REPORT LOOP
                    
                V_REAL_BAL_T0 :=V_REAL_BAL_T0+REC.REAL_MASUK_T0-REC.REAL_KELUAR_T0;
                V_EST_BAL_T0 := V_REAL_BAL_T0+REC.REAL_MASUK_T0-REC.REAL_KELUAR_T0+REC.EST_MASUK_T0-REC.EST_KELUAR_T0;
                
                BEGIN
                UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T0=V_REAL_BAL_T0, EST_BALANCE_T0 = V_EST_BAL_T0 
                  WHERE RAND_VALUE=V_RANDOM_VALUE 
                  AND USER_ID=P_USER_ID
                AND KATEGORI=REC.KATEGORI;
                EXCEPTION
                WHEN OTHERS THEN
                  V_ERROR_CODE:=-80;
                  V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T0'||SQLERRM,1,200);
                  RAISE V_ERR;
                END;
              
        END LOOP;

         --UPDATE BALANCE T1
        FOR REC IN CSR_REPORT LOOP
                    
                --UPDATE SALDO AWAL T1
                IF I=1 THEN
                    BEGIN
                    UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T1=V_EST_BAL_T0,EST_BALANCE_T1=V_EST_BAL_T0
                     WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID AND KATEGORI='BEG';
                    EXCEPTION
                    WHEN OTHERS THEN
                      V_ERROR_CODE:=-85;
                      V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T1'||SQLERRM,1,200);
                      RAISE V_ERR;
                    END;
                END IF;

                V_REAL_BAL_T1 :=V_EST_BAL_T0+REC.REAL_MASUK_T1-REC.REAL_KELUAR_T1;
                V_EST_BAL_T1 := V_EST_BAL_T0+REC.REAL_MASUK_T1-REC.REAL_KELUAR_T1+REC.EST_MASUK_T1-REC.EST_KELUAR_T1;
                
                BEGIN
                UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T1=V_REAL_BAL_T1, EST_BALANCE_T1 = V_EST_BAL_T1 
                  WHERE RAND_VALUE=V_RANDOM_VALUE 
                  AND USER_ID=P_USER_ID
                AND KATEGORI=REC.KATEGORI;
                EXCEPTION
                WHEN OTHERS THEN
                  V_ERROR_CODE:=-90;
                  V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T1'||SQLERRM,1,200);
                  RAISE V_ERR;
                END;
              I := I+1;
        END LOOP;

          --UPDATE BALANCE T2
          I:=1;
        FOR REC IN CSR_REPORT LOOP
                    
               --UPDATE SALDO AWAL T2
                IF I=1 THEN
                    BEGIN
                    UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T2=V_EST_BAL_T1,EST_BALANCE_T2=V_EST_BAL_T1
                     WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID AND KATEGORI='BEG';
                    EXCEPTION
                    WHEN OTHERS THEN
                      V_ERROR_CODE:=-95;
                      V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T2'||SQLERRM,1,200);
                      RAISE V_ERR;
                    END;
                END IF;

                V_REAL_BAL_T2 :=V_EST_BAL_T1+REC.REAL_MASUK_T2-REC.REAL_KELUAR_T2;
                V_EST_BAL_T2 := V_EST_BAL_T1+REC.REAL_MASUK_T2-REC.REAL_KELUAR_T2+REC.EST_MASUK_T2-REC.EST_KELUAR_T2;
                
                BEGIN
                UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T2=V_REAL_BAL_T2, EST_BALANCE_T2 = V_EST_BAL_T2 
                  WHERE RAND_VALUE=V_RANDOM_VALUE 
                  AND USER_ID=P_USER_ID
                AND KATEGORI=REC.KATEGORI;
                EXCEPTION
                WHEN OTHERS THEN
                  V_ERROR_CODE:=-100;
                  V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T2'||SQLERRM,1,200);
                  RAISE V_ERR;
                END;
              I:=I+1;
        END LOOP;

        --UPDATE BALANCE T3
        I:=1;
        FOR REC IN CSR_REPORT LOOP
                    

            --UPDATE SALDO AWAL T3
                IF I=1 THEN
                    BEGIN
                    UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T3=V_EST_BAL_T2,EST_BALANCE_T3=V_EST_BAL_T2
                     WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID AND KATEGORI='BEG';
                    EXCEPTION
                    WHEN OTHERS THEN
                      V_ERROR_CODE:=-110;
                      V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T3'||SQLERRM,1,200);
                      RAISE V_ERR;
                    END;
                END IF;

                V_REAL_BAL_T3 :=V_EST_BAL_T2+REC.REAL_MASUK_T3-REC.REAL_KELUAR_T3;
                V_EST_BAL_T3 := V_EST_BAL_T2+REC.REAL_MASUK_T3-REC.REAL_KELUAR_T3+REC.EST_MASUK_T3-REC.EST_KELUAR_T3;
                
                BEGIN
                UPDATE R_CASHFLOW_HARIAN SET REAL_BALANCE_T3=V_REAL_BAL_T3, EST_BALANCE_T3 = V_EST_BAL_T3 
                  WHERE RAND_VALUE=V_RANDOM_VALUE 
                  AND USER_ID=P_USER_ID
                AND KATEGORI=REC.KATEGORI;
                EXCEPTION
                WHEN OTHERS THEN
                  V_ERROR_CODE:=-115;
                  V_ERROR_MSG :=SUBSTR('UPDATE R_CASHFLOW_HARIAN BALANCE T3'||SQLERRM,1,200);
                  RAISE V_ERR;
                END;
              I:=I+1;
        END LOOP;
    --DELETE DATA TEMPORARY TABLE
    
    BEGIN 
    DELETE FROM TMP_CASHFLOW_REAL WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE :=-120;
      V_ERROR_MSG :=SUBSTR('DELETE FROM TMP_CASHFLOW_REAL '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    BEGIN 
    DELETE FROM TMP_CASHFLOW_EST WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE :=-130;
      V_ERROR_MSG :=SUBSTR('DELETE FROM TMP_CASHFLOW_EST '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    BEGIN 
    DELETE FROM TEMP_DAILY_CASH_FLOW WHERE RAND_VALUE=V_RANDOM_VALUE AND USER_ID=P_USER_ID;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE :=-140;
      V_ERROR_MSG :=SUBSTR('DELETE FROM TEMP_DAILY_CASH_FLOW '||SQLERRM,1,200);
      RAISE V_ERR;
    END;


P_RAND_VALUE :=V_RANDOM_VALUE;
P_ERROR_CODE:=1;
P_ERROR_MSG:='';

EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG := V_ERROR_MSG;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE :=-1;
  P_ERROR_MSG := SUBSTR(SQLERRM,1,200);
END SPR_CASHFLOW_HARIAN;