create or replace PROCEDURE SP_FI_TD_DOWNLOAD(
    P_TRX_DATE   DATE,
    P_TRX_STATUS VARCHAR2,
    P_IM_CODE VARCHAR2,
    P_USER_ID    VARCHAR2,
    P_UPDATE_SEQ OUT NUMBER,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS
  V_SEQ_NAME   VARCHAR2(20):='SEQ_SINVEST';
  v_err        EXCEPTION;
  V_ERROR_CODE NUMBER(5);
  V_ERROR_MSG  VARCHAR2(200);
  V_SQL        VARCHAR2(200);
  V_UPDATE_SEQ NUMBER;
  V_CNT        NUMBER(5);
  V_TD_REFERENCE_NO VARCHAR2(20);
  CURSOR CSR_DATA
  IS
   SELECT DECODE(P_TRX_STATUS,'A','NEWM','CANC') TRANSACTION_STATUS,'1' DATA_TYPE,trx_date AS TRADE_DATE,VALUE_DT SETTLEMENT_DATE,
    BR.BR_CODE, c.im_code, t.bond_cd SECURITY_CODE,
    DECODE(T.TRX_TYPE,'B','1','2')BUY_SELL, T.PRICE,t.nominal FACE_VALUE,
    T.TRX_SEQ_NO, DECODE(T.TRX_TYPE,'S',T.BUY_DT,NULL) AS ACQUISITION_DATE,
  DECODE(T.TRX_TYPE,'S',T.BUY_PRICE,NULL) ACQUISITION_PRICE_PERC,  DECODE(T.TRX_TYPE,'S',T.COST,NULL) ACQUISITION_AMOUNT
    FROM T_BOND_TRX T ,(SELECT DSTR1 BR_CODE FROM MST_SYS_PARAM WHERE PARAM_ID='SINVEST')BR,
    mst_fund_counterpart C, MST_IM M
    WHERE APPROVED_STS='A'
    AND C.IM_CODE=M.IM_CODE
    AND M.APPROVED_STAT='A'
    AND T.LAWAN = c.counterpart
    AND C.APPROVED_STAT='A'
    AND T.TRX_DATE =P_TRX_DATE
    AND (P_IM_CODE='%' OR C.IM_CODE=P_IM_CODE);
BEGIN

  --CREATE SEQUENCE FOR UPDATE_SEQ IM FILE
  BEGIN
    SELECT COUNT(1) INTO V_CNT FROM ALL_SEQUENCES WHERE SEQUENCE_NAME=V_SEQ_NAME;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-10;
    V_ERROR_MSG :=SUBSTR('CHECK SEQUENCE '||V_SEQ_NAME||'IN ALL_SEQUENCES'||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  IF V_CNT=0 THEN
    v_sql:='CREATE SEQUENCE '||V_SEQ_NAME ||' INCREMENT BY 1 START WITH 1 MAXVALUE 999999 NOCACHE nocycle';
    BEGIN
      EXECUTE IMMEDIATE V_SQL;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-20;
      V_ERROR_MSG :=SUBSTR('CREATE SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  
  BEGIN
    SELECT COUNT(1), MAX(UPDATE_SEQ)
    INTO V_CNT, V_UPDATE_SEQ
    FROM FI_TD_DOWNLOAD
    WHERE TRADE_DATE=P_TRX_DATE;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-40;
    V_ERROR_MSG :=SUBSTR('SELECT FROM FI_TD_DOWNLOAD '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
    IF P_TRX_STATUS='A' THEN
  
  IF V_UPDATE_SEQ IS NULL THEN
    V_SQL       := 'SELECT '||V_SEQ_NAME||'.NEXTVAL FROM DUAL';
    BEGIN
      EXECUTE IMMEDIATE V_SQL INTO V_UPDATE_SEQ;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-30;
      V_ERROR_MSG :=SUBSTR('SELECT SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  

    FOR REC IN CSR_DATA
    LOOP
  
  BEGIN
    SELECT COUNT(1)
    INTO V_CNT
    FROM FI_TD_DOWNLOAD
    WHERE TRADE_DATE=P_TRX_DATE
    and TRX_SEQ_NO=REC.TRX_SEQ_NO;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-40;
    V_ERROR_MSG :=SUBSTR('SELECT FROM FI_TD_DOWNLOAD '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
    
      IF V_CNT=0 THEN
      
        V_TD_REFERENCE_NO := F_GET_TD_REF_NO(REC.TRADE_DATE);
        BEGIN
          INSERT
          INTO FI_TD_DOWNLOAD
            (
             TRANSACTION_STATUS,DATA_TYPE,TD_REFERENCE_ID,TRADE_DATE,TRX_SEQ_NO,SETTLEMENT_DATE,BR_CODE
            ,IM_CODE,SECURITY_CODE,BUY_SELL,PRICE,FACE_VALUE,TD_REFERENCE_NO,DATA_TYPE_SELL,TD_REFERENCE_NO_SELL
            ,ACQUISITION_DATE,ACQUISITION_PRICE_PERC,ACQUISITION_AMOUNT,GENERATE_DATE,USER_ID,UPDATE_SEQ, FACE_VALUE_SELL
            )
            VALUES
            (
              REC.TRANSACTION_STATUS, REC.DATA_TYPE, NULL, REC.TRADE_DATE, REC.TRX_SEQ_NO, REC.SETTLEMENT_DATE, REC.BR_CODE,
              REC.IM_CODE, REC.SECURITY_CODE, REC.BUY_SELL, REC.PRICE, REC.FACE_VALUE,V_TD_REFERENCE_NO,DECODE(REC.BUY_SELL,'2','2',NULL),
              DECODE(REC.BUY_SELL,'2',V_TD_REFERENCE_NO,NULL),DECODE(REC.BUY_SELL,'2',REC.ACQUISITION_DATE,NULL),
              DECODE(REC.BUY_SELL,'2',REC.ACQUISITION_PRICE_PERC,NULL), 
               DECODE(REC.BUY_SELL,2,REC.ACQUISITION_AMOUNT,NULL), SYSDATE, P_USER_ID, V_UPDATE_SEQ, REC.FACE_VALUE
            );
        EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE:=-40;
          V_ERROR_MSG :=SUBSTR('INSERT INTO FI_TD_DOWNLOAD '||SQLERRM,1,200);
          RAISE V_ERR;
        END;

      END IF;--END V_CNT=0
      
    END LOOP;--END LOOP CSR_DATA
  END IF;
  
  COMMIT;
  
  P_UPDATE_SEQ :=V_UPDATE_SEQ;
  P_ERROR_CODE :=1;
  P_ERROR_MSG  :='';
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG  :=V_ERROR_MSG;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE :=-1;
  P_ERROR_MSG  := SUBSTR(SQLERRM,1,200);
END SP_FI_TD_DOWNLOAD;