create or replace PROCEDURE SP_FI_TC_DOWNLOAD(
    P_TRX_DATE   DATE,
    P_TRX_STATUS VARCHAR2,
    P_IM_CODE    VARCHAR2,
    P_USER_ID    VARCHAR2,
    P_UPDATE_SEQ OUT NUMBER,
    P_ERROR_CODE OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2)
IS

  V_SEQ_NAME        VARCHAR2(20):='SEQ_SINVEST';
  V_ERR             EXCEPTION;
  V_ERROR_CODE      NUMBER(5);
  V_ERROR_MSG       VARCHAR2(200);
  V_SQL             VARCHAR2(200);
  V_UPDATE_SEQ      NUMBER;
  V_CNT             NUMBER(5);
  V_TC_REFERENCE_NO VARCHAR2(20);
  
  CURSOR CSR_DATA
  IS
    SELECT DECODE(P_TRX_STATUS,'A','NEWM','CANC')TRANSACTION_STATUS,'1' DATA_TYPE, T.TRX_DATE TRADE_DATE, T.VALUE_DT SETTLEMENT_DATE, BR.BR_CODE, C.IM_CODE,T.CUSTODIAN_CD COUNTERPARTY_CODE,C.FUND_CODE,T.BOND_CD SECURITY_CODE,DECODE(T.TRX_TYPE,'B','1','2')BUY_SELL, T.PRICE, T.NOMINAL FACE_VALUE, T.COST PROCEEDS, T.LAST_COUPON LAST_COUPON_DATE, T.NEXT_COUPON NEXT_COUPON_DATE,T.ACCRUED_DAYS ACCRUED_DAYS,T.ACCRUED_INT ACCRUED_INT_AMOUNT, T.CAPITAL_TAX CAPITAL_GAIN_TAX, T.ACCRUED_INT_TAX INTEREST_INCOME_TAX,
      CASE
        WHEN T.ACCRUED_INT_TAX>0
        THEN (T.ACCRUED_INT_TAX+ T.CAPITAL_TAX)
        ELSE CAPITAL_TAX
      END AS WITHHOLDING_TAX, T.NET_AMOUNT NET_PROCEEDS, DECODE(T.TRX_TYPE,'B',NULL,P.NO_IJIN) SELLER_TAX_ID,'3' PURPOSE_OF_TRX, T.TRX_SEQ_NO, T.BUY_DT ACQUISITION_DATE, T.BUY_PRICE ACQUISITION_PRICE,T.COST ACQUISITION_AMOUNT, T.CAPITAL_GAIN, T.ACCRUED_DAYS DAYS_OF_HOLDING_INTEREST, T.ACCRUED_INT HOLDING_INTEREST_AMOUNT, (T.CAPITAL_GAIN+T.ACCRUED_INT)TOTAL_TAXABLE_INCOME,(T.CAPITAL_TAX_PCN*100) TAX_RATE_IN_PERC,T.CAPITAL_TAX TAX_AMOUNT
    FROM T_BOND_TRX T, MST_FUND_COUNTERPART C, (
        SELECT DSTR1 BR_CODE FROM MST_SYS_PARAM WHERE PARAM_ID='SINVEST'
      )
    BR, (
      SELECT TRIM(MST_COMPANY.NO_IJIN1) NO_IJIN FROM MST_COMPANY
    )
    P, MST_IM M
  WHERE APPROVED_STS ='A'
  AND C.IM_CODE      =M.IM_CODE
  AND M.APPROVED_STAT='A'
  AND T.LAWAN        = C.COUNTERPART
  AND T.TRX_DATE     =P_TRX_DATE
  AND (P_IM_CODE     ='%'
  OR C.IM_CODE       =P_IM_CODE);
  
BEGIN

  --CREATE SEQUENCE FOR UPDATE_SEQ IM FILE
  BEGIN
    SELECT COUNT(1) INTO V_CNT FROM ALL_SEQUENCES WHERE SEQUENCE_NAME=V_SEQ_NAME;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-10;
    V_ERROR_MSG :=SUBSTR('CHECK SEQUENCE '||V_SEQ_NAME||'IN ALL_SEQUENCES'||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  IF V_CNT=0 THEN
    V_SQL:='CREATE SEQUENCE '||V_SEQ_NAME ||' INCREMENT BY 1 START WITH 1 MAXVALUE 999999 NOCACHE NOCYCLE';
    BEGIN
      EXECUTE IMMEDIATE V_SQL;
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-20;
      V_ERROR_MSG :=SUBSTR('CREATE SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
      RAISE V_ERR;
    END;
  END IF;
  
  BEGIN
    SELECT COUNT(1), MAX(UPDATE_SEQ)
    INTO V_CNT, V_UPDATE_SEQ
    FROM FI_TC_DOWNLOAD
    WHERE TRADE_DATE=P_TRX_DATE;
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CODE:=-40;
    V_ERROR_MSG :=SUBSTR('SELECT FROM FI_TC_DOWNLOAD '||SQLERRM,1,200);
    RAISE V_ERR;
  END;
  
  IF P_TRX_STATUS    ='A' THEN
    IF V_UPDATE_SEQ IS NULL THEN
      V_SQL         := 'SELECT '||V_SEQ_NAME||'.NEXTVAL FROM DUAL';
      BEGIN
        EXECUTE IMMEDIATE V_SQL INTO V_UPDATE_SEQ;
      EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE:=-30;
        V_ERROR_MSG :=SUBSTR('SELECT SEQUENCE '||V_SEQ_NAME||' '||SQLERRM,1,200);
        RAISE V_ERR;
      END;
    END IF;
    
    FOR REC IN CSR_DATA
    LOOP
      BEGIN
        SELECT COUNT(1)
        INTO V_CNT
        FROM FI_TC_DOWNLOAD
        WHERE TRADE_DATE=P_TRX_DATE
        AND TRX_SEQ_NO  =REC.TRX_SEQ_NO;
      EXCEPTION
      WHEN OTHERS THEN
        V_ERROR_CODE:=-40;
        V_ERROR_MSG :=SUBSTR('SELECT FROM FI_TC_DOWNLOAD '||SQLERRM,1,200);
        RAISE V_ERR;
      END;
      
      IF V_CNT             =0 THEN
        V_TC_REFERENCE_NO :=F_GET_TD_REF_NO(REC.TRADE_DATE);
        BEGIN
          INSERT
          INTO FI_TC_DOWNLOAD
            (
              TRANSACTION_STATUS,TC_REFERENCE_ID,DATA_TYPE,TC_REFERENCE_NO,TRADE_DATE,TRX_SEQ_NO,
              SETTLEMENT_DATE ,BR_CODE,IM_CODE,COUNTERPARTY_CODE,FUND_CODE,SECURITY_CODE,
              BUY_SELL,PRICE,FACE_VALUE,PROCEEDS,LAST_COUPON_DATE ,NEXT_COUPON_DATE,
              ACCRUED_DAYS,ACCRUED_INTEREST_AMOUNT,OTHER_FEE,CAPITAL_GAIN_TAX,INTEREST_INCOME_TAX,
              WITHHOLDING_TAX, NET_PROCEEDS,SELLER_TAX_ID,PURPOSE_OF_TRANSACTION, 
              DATA_TYPE_SELL,TC_REFERENCE_NO_SELL,
              FACE_VALUE_SELL, ACQUISITION_DATE,
              ACQUISITION_PRICE,ACQUISITION_AMOUNT,
              CAPITAL_GAIN,DAYS_OF_HOLDING_INTEREST, 
              HOLDING_INTEREST_AMOUNT,TOTAL_TAXABLE_INCOME,
              TAX_RATE_IN_PERC,TAX_AMOUNT,
              GENERATE_DATE,USER_ID,UPDATE_SEQ
            )
            VALUES
            (
              REC.TRANSACTION_STATUS, NULL,REC.DATA_TYPE, V_TC_REFERENCE_NO , REC.TRADE_DATE, REC.TRX_SEQ_NO,
              REC.SETTLEMENT_DATE, REC.BR_CODE, REC.IM_CODE, REC.COUNTERPARTY_CODE, REC.FUND_CODE, REC.SECURITY_CODE, 
              REC.BUY_SELL, REC.PRICE, REC.FACE_VALUE, REC.PROCEEDS, REC.LAST_COUPON_DATE, REC.NEXT_COUPON_DATE, 
              REC.ACCRUED_DAYS, REC.ACCRUED_INT_AMOUNT,NULL,REC.CAPITAL_GAIN_TAX, REC.INTEREST_INCOME_TAX, 
              REC.WITHHOLDING_TAX,REC.NET_PROCEEDS, REC.SELLER_TAX_ID, REC.PURPOSE_OF_TRX, 
              DECODE(REC.BUY_SELL,'2','2',NULL) , DECODE(REC.BUY_SELL,'2',V_TC_REFERENCE_NO,NULL), 
              DECODE(REC.BUY_SELL,'2',REC.FACE_VALUE,NULL), DECODE(REC.BUY_SELL,'2',REC.ACQUISITION_DATE,NULL),
              DECODE(REC.BUY_SELL,'2',REC.ACQUISITION_PRICE,NULL), DECODE(REC.BUY_SELL,'2',REC.ACQUISITION_AMOUNT,NULL), 
              DECODE(REC.BUY_SELL,'2',REC.CAPITAL_GAIN, NULL), DECODE(REC.BUY_SELL,'2',REC.DAYS_OF_HOLDING_INTEREST, NULL), 
              DECODE(REC.BUY_SELL,'2',REC.HOLDING_INTEREST_AMOUNT, NULL), DECODE(REC.BUY_SELL,'2',REC.TOTAL_TAXABLE_INCOME, NULL), 
              DECODE(REC.BUY_SELL,'2',REC.TAX_RATE_IN_PERC,NULL), DECODE(REC.BUY_SELL,'2',REC.TAX_AMOUNT,NULL), 
              SYSDATE, P_USER_ID, V_UPDATE_SEQ
            );
        EXCEPTION
        WHEN OTHERS THEN
          V_ERROR_CODE:=-40;
          V_ERROR_MSG :=SUBSTR('INSERT INTO FI_TC_DOWNLOAD '||SQLERRM,1,200);
          RAISE V_ERR;
        END;
      END IF;--END V_CNT=0
    END LOOP;--END LOOP CSR_DATA
  END IF;
  
  COMMIT;
  
  P_UPDATE_SEQ :=V_UPDATE_SEQ;
  P_ERROR_CODE :=1;
  P_ERROR_MSG  :='';
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_CODE :=V_ERROR_CODE;
  P_ERROR_MSG  :=V_ERROR_MSG;
WHEN OTHERS THEN
  ROLLBACK;
  P_ERROR_CODE :=-1;
  P_ERROR_MSG  := SUBSTR(SQLERRM,1,200);
END SP_FI_TC_DOWNLOAD;