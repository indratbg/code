CREATE PROCEDURE SPR_RECON_SAFE_KEEPING_FEE(P_REPORT_DATE DATE,
	P_USER_ID VARCHAR2,
	P_GENERATE_DATE DATE,
	P_RAND_VALUE OUT NUMBER,
  P_ERROR_CODE OUT NUMBER,
  P_ERROR_MSG OUT VARCHAR2)
IS

V_RANDOM_VALUE NUMBER(10,0);
V_ERR EXCEPTION;
V_ERROR_CODE NUMBER;
V_ERROR_MSG VARCHAR2(200);
V_BGN_DATE DATE;
BEGIN

		V_RANDOM_VALUE := ABS(DBMS_RANDOM.RANDOM);
		 
		BEGIN
		  SP_RPT_REMOVE_RAND('R_RECON_SAFE_KEEPING_FEE',V_RANDOM_VALUE,V_ERROR_MSG,V_ERROR_CODE);
		EXCEPTION
		WHEN OTHERS THEN
		    V_ERROR_CODE  := -3;
		    V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND '||V_ERROR_MSG||SQLERRM(SQLCODE),1,200);
		    RAISE V_ERR;
		END;
		
		
		IF V_ERROR_CODE  < 0 THEN
			V_ERROR_CODE  := -4;
			V_ERROR_MSG := SUBSTR('SP_RPT_REMOVE_RAND'||V_ERROR_MSG,1,200);
			RAISE V_ERR;
		END IF;

		V_BGN_DATE :=P_REPORT_DATE-TO_CHAR(P_REPORT_DATE,'DD')+1;

		BEGIN
		INSERT INTO R_RECON_SAFE_KEEPING_FEE(SUBREK,KSEI_FEE,SYS_FEE,SELISIH,RAND_VALUE,USER_ID,GENERATE_DATE)
		SELECT SUBREK, SUM(KSEI_FEE)KSEI_FEE,SUM(SYS_FEE)SYS_FEE,SUM(KSEI_FEE)-SUM(SYS_FEE) SELISIH, V_RANDOM_VALUE,P_USER_ID,P_GENERATE_DATE
		FROM
			(
				SELECT SUBSTR(subrek,6,4)subrek,fee KSEI_FEE, 0 SYS_FEE FROM T_SAFE_KEEPING_FEE_KSEI 
				where from_date = V_BGN_DATE
				AND to_date = P_REPORT_DATE
				UNION ALL
				SELECT subrek, 0, ROUND(SUM(stk_value) * 0.005/100 / 365, 2) AS  SYS_FEE
				FROM T_SAFE_KEEPING_FEE
				WHERE DOC_DT BETWEEN V_BGN_DATE AND P_REPORT_DATE
				GROUP BY subrek 
			)
		GROUP BY SUBREK
		HAVING ABS(SUM(KSEI_FEE)-SUM(SYS_FEE))>10;
		EXCEPTION
		WHEN OTHERS THEN
		    V_ERROR_CODE  := -30;
		    V_ERROR_MSG := SUBSTR('INSERT INTO R_RECON_SAFE_KEEPING_FEE '||SQLERRM,1,200);
		    RAISE V_ERR;
		END;

P_RAND_VALUE :=V_RANDOM_VALUE;
P_ERROR_CODE:=1;
P_ERROR_MSG:='';

EXCEPTION
WHEN V_ERR THEN
	ROLLBACK;
	P_ERROR_CODE :=V_ERROR_CODE;
	P_ERROR_MSG := V_ERROR_MSG;
WHEN OTHERS THEN
	ROLLBACK;
	P_ERROR_CODE :=-1;
	P_ERROR_MSG := SUBSTR(SQLERRM,1,200);
END SPR_RECON_SAFE_KEEPING_FEE;