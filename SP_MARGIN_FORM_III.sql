create or replace 
PROCEDURE SP_MARGIN_FORM_III(
    P_END_DATE DATE,
    P_USER_ID T_MANY_HEADER.USER_ID%TYPE,
    P_IP_ADDRESS T_MANY_HEADER.IP_ADDRESS%TYPE,
    P_UPDATE_DATE OUT T_MANY_HEADER.UPDATE_DATE%TYPE,
    P_UPDATE_SEQ OUT T_MANY_HEADER.UPDATE_SEQ%TYPE,
    P_ERROR_CD OUT NUMBER,
    P_ERROR_MSG OUT VARCHAR2 )
AS
  V_ERR       EXCEPTION;
  V_ERROR_CD  NUMBER(5);
  V_ERROR_MSG VARCHAR2(200);
  V_UPDATE_DATE T_MANY_HEADER.UPDATE_DATE%TYPE;
  V_UPDATE_SEQ T_MANY_HEADER.UPDATE_SEQ%TYPE;
  V_MENU_NAME T_MANY_HEADER.MENU_NAME%TYPE:='MARGIN FORM';
BEGIN

  --DELETE OLD REPORT SAME DATE
  BEGIN
    DELETE LAP_MARGIN_FORM_III_I_1
    WHERE REPORT_DATE = P_END_DATE
   -- AND USER_ID       = P_USER_ID
    AND APPROVED_STAT ='A';
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -5;
    V_ERROR_MSG := SUBSTR('DELETE OLD REPORT FROM LAP_MARGIN_FORM_III_I_1 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  BEGIN
    DELETE LAP_MARGIN_FORM_III_I_2
    WHERE REPORT_DATE = P_END_DATE
    AND USER_ID       = P_USER_ID
    AND APPROVED_STAT ='A';
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -6;
    V_ERROR_MSG := SUBSTR('DELETE OLD REPORT FROM LAP_MARGIN_FORM_III_I_2 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  BEGIN
    DELETE LAP_MARGIN_FORM_III_I_3
    WHERE REPORT_DATE = P_END_DATE
    AND USER_ID       = P_USER_ID
    AND APPROVED_STAT ='A';
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -7;
    V_ERROR_MSG := SUBSTR('DELETE OLD REPORT FROM LAP_MARGIN_FORM_III_I_3 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  --EXECUTE T MANY HEADER
  BEGIN
    Sp_T_Many_Header_Insert(V_MENU_NAME, 'I', P_USER_ID, P_IP_ADDRESS, NULL, V_UPDATE_DATE, V_UPDATE_SEQ, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -10;
    V_ERROR_MSG := SUBSTR('SP_T_MANY_HEADER_INSERT '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -20;
    V_ERROR_MSG :=SUBSTR('Sp_T_Many_Header_Insert : '||SQLERRM(SQLCODE),1,200);
    RAISE v_err;
  END IF;
  
  ---INSERT TO T_MANY_DETAIL END _DATE
  BEGIN
    INSERT
    INTO T_MANY_DETAIL
      (
        UPDATE_DATE ,
        UPDATE_SEQ ,
        TABLE_NAME ,
        RECORD_SEQ ,
        TABLE_ROWID ,
        FIELD_NAME ,
        FIELD_TYPE ,
        FIELD_VALUE ,
        UPD_STATUS ,
        UPD_FLG
      )
      VALUES
      (
        V_UPDATE_DATE,
        V_UPDATE_SEQ,
        'FORM_MARGIN',
        1,
        NULL,
        'END_DATE',
        'D',
        TO_CHAR(P_END_DATE,'YYYY/MM/DD HH24:MI:SS'),
        'X',
        'N'
      );
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -25;
    V_ERROR_MSG := SUBSTR('SP_T_MANY_HEADER_INSERT '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  --CALL SP_MARGIN_FORM_III_1
  BEGIN
    SP_MARGIN_FORM_III_1( P_END_DATE, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID , P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -30;
    V_ERROR_MSG := SUBSTR('SP_MARGIN_FORM_III_1 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -40;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  --CALL SP_MARGIN_FORM_III_2
  BEGIN
    SP_MARGIN_FORM_III_2( P_END_DATE, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID , P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -50;
    V_ERROR_MSG := SUBSTR('SP_MARGIN_FORM_III_2 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -60;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  
  --CALL SP_MARGIN_FORM_III_3
  BEGIN
    SP_MARGIN_FORM_III_3( P_END_DATE, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID , P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -70;
    V_ERROR_MSG := SUBSTR('SP_MARGIN_FORM_III_3 '|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -80;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  
  --APPROVE REPORT LAP_MARGIN_FORM_III_I_1
  BEGIN
    SP_LAP_APPROVE ( 'LAP_MARGIN_FORM_III_I_1', V_MENU_NAME, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID, P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -90;
    V_ERROR_MSG := SUBSTR('SP_LAP_APPROVE LAP_MARGIN_FORM_III_I_1'|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -100;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  
  --APPROVE REPORT LAP_MARGIN_FORM_III_I_2
  BEGIN
    SP_LAP_APPROVE ( 'LAP_MARGIN_FORM_III_I_2', V_MENU_NAME, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID, P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -110;
    V_ERROR_MSG := SUBSTR('SP_LAP_APPROVE LAP_MARGIN_FORM_III_I_2'|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -120;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  
  --APPROVE REPORT LAP_MARGIN_FORM_III_I_3
  BEGIN
    SP_LAP_APPROVE ( 'LAP_MARGIN_FORM_III_I_3', V_MENU_NAME, V_UPDATE_DATE, V_UPDATE_SEQ, P_USER_ID, P_IP_ADDRESS, V_ERROR_CD, V_ERROR_MSG);
  EXCEPTION
  WHEN OTHERS THEN
    V_ERROR_CD  := -130;
    V_ERROR_MSG := SUBSTR('SP_LAP_APPROVE LAP_MARGIN_FORM_III_I_3'|| SQLERRM(SQLCODE),1,200);
    RAISE V_ERR;
  END;
  
  IF V_ERROR_CD  <0 THEN
    V_ERROR_CD  := -140;
    V_ERROR_MSG := V_ERROR_MSG;
    RAISE V_ERR;
  END IF;
  
  P_UPDATE_DATE := V_UPDATE_DATE;
  P_UPDATE_SEQ := V_UPDATE_SEQ;
  P_ERROR_CD  := 1 ;
  P_ERROR_MSG := '';
EXCEPTION
WHEN V_ERR THEN
  ROLLBACK;
  P_ERROR_MSG := V_ERROR_MSG;
  P_ERROR_CD  := V_ERROR_CD;
WHEN OTHERS THEN
  P_ERROR_CD  := -1 ;
  P_ERROR_MSG := SUBSTR(SQLERRM(SQLCODE),1,200);
  RAISE;
END SP_MARGIN_FORM_III;