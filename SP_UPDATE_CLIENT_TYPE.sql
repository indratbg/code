create or replace PROCEDURE SP_UPDATE_CLIENT_TYPE(
	P_ROWID_CLIENT T_MANY_DETAIL.TABLE_ROWID%TYPE,
	P_CLIENT_TYPE_3 MST_CLIENT.CLIENT_TYPE_3%TYPE,
  P_BANK_CD MST_CLIENT.BANK_CD%TYPE,
  P_BANK_ACCT_NUM MST_CLIENT.BANK_ACCT_NUM%TYPE,
	P_UPD_DT						MST_CLIENT_BANK.UPD_DT%TYPE,	
	P_UPD_BY						MST_CLIENT_BANK.UPD_BY%TYPE,
	P_UPD_STATUS					T_MANY_DETAIL.UPD_STATUS%TYPE,
	P_IP_ADDRESS					T_MANY_HEADER.IP_ADDRESS%TYPE,
	P_UPDATE_DATE T_MANY_HEADER.UPDATE_DATE%TYPE,
	P_UPDATE_SEQ T_MANY_HEADER.UPDATE_SEQ%TYPE,
	P_ERROR_CODE					OUT			NUMBER,
	P_ERROR_MSG						OUT			VARCHAR2
) IS

V_ERR EXCEPTION;
V_ERROR_CODE					NUMBER;
V_ERROR_MSG						VARCHAR2(200);
V_CNT NUMBER;
V_REC_CLIENT  MST_CLIENT%ROWTYPE;
V_REC_CIF  MST_CIF%ROWTYPE;
V_TABLE_ROWID T_MANY_DETAIL.TABLE_ROWID%TYPE;
TYPE t_many_detail_table IS TABLE OF T_MANY_DETAIL%ROWTYPE;
v_tab t_many_detail_table := t_many_detail_table();
V_CIFS MST_CIF.CIFS%TYPE;

CURSOR CSR_TABLE_CLIENT IS
SELECT *
FROM MST_CLIENT
WHERE ROWID = P_ROWID_CLIENT;
BEGIN
	

	BEGIN
	SELECT ROWID,CIFS INTO V_TABLE_ROWID, V_CIFS FROM MST_CLIENT WHERE ROWID=P_ROWID_CLIENT;
	EXCEPTION
  WHEN OTHERS THEN
		V_ERROR_CODE:=-10;
		V_ERROR_MSG :=SUBSTR('SELECT ROWID '||SQLERRM,1,200);
		RAISE V_ERR;
	END;
  
    --cek yang belum di approve
    BEGIN
    select count(1) into v_cnt from t_many_header a, t_many_detail b
    where a.update_date=b.update_date
    and a.update_seq=b.update_seq
    and a.approved_status='E'
    AND b.table_rowid = P_ROWID_CLIENT
    AND B.FIELD_NAME ='BANK_CD';
    EXCEPTION
    WHEN OTHERS THEN
      V_ERROR_CODE:=-13;
      V_ERROR_MSG :=SUBSTR('Check t_many_header approved_status E '||SQLERRM,1,200);
      RAISE V_ERR;
    END;

    IF V_CNT>0 THEN
      V_ERROR_CODE:=-15;
      V_ERROR_MSG :='Masih ada yang belum di approve';
      RAISE V_ERR;
    END IF;
  
  
--MST_CLIENT
		OPEN CSR_TABLE_CLIENT;
		FETCH CSR_TABLE_CLIENT INTO V_REC_CLIENT;
				--OPEN V_MANY_DETAIL FOR	
				SELECT P_UPDATE_DATE AS UPDATE_DATE, P_UPDATE_SEQ AS UPDATE_SEQ, TABLE_NAME, 1 AS RECORD_SEQ, V_TABLE_ROWID AS TABLE_ROWID, A.FIELD_NAME,FIELD_TYPE, B.FIELD_VALUE, 'U' AS STATUS,  B.UPD_FLG
				BULK COLLECT INTO V_TAB
				FROM(
					SELECT 'MST_CLIENT' AS TABLE_NAME, COLUMN_NAME AS FIELD_NAME,
						   DECODE(DATA_TYPE,'VARCHAR2','S','CHAR','S','NUMBER','N','DATE','D','X') AS FIELD_TYPE
					FROM ALL_TAB_COLUMNS
					WHERE TABLE_NAME = 'MST_CLIENT'
					AND OWNER = 'IPNEXTG'
				) A,
				( 	
					SELECT  'CLIENT_TYPE_3'  AS FIELD_NAME, P_CLIENT_TYPE_3 AS FIELD_VALUE,  DECODE(V_REC_CLIENT.CLIENT_TYPE_3, P_CLIENT_TYPE_3,'N','Y') UPD_FLG FROM DUAL
          UNION ALL
          SELECT  'BANK_CD'  AS FIELD_NAME, P_BANK_CD AS FIELD_VALUE,  DECODE(V_REC_CLIENT.BANK_CD, p_bank_cd,'N','Y') UPD_FLG FROM DUAL
          UNION ALL
          SELECT  'BANK_ACCT_NUM'  AS FIELD_NAME, p_bank_acct_num AS FIELD_VALUE,  DECODE(V_REC_CLIENT.BANK_ACCT_NUM, p_bank_acct_num,'N','Y') UPD_FLG FROM DUAL
          UNION ALL
          SELECT  'UPD_DT'  AS FIELD_NAME, TO_CHAR(P_UPD_DT,'YYYY/MM/DD HH24:MI:SS') AS FIELD_VALUE,  DECODE(V_REC_CLIENT.upd_dt, P_UPD_DT,'N','Y') UPD_FLG FROM DUAL
          UNION ALL
          SELECT  'UPD_BY'  AS FIELD_NAME, P_UPD_BY AS FIELD_VALUE,  DECODE(V_REC_CLIENT.UPD_BY, P_UPD_BY,'N','Y') UPD_FLG FROM DUAL
							
				) B
				WHERE A.FIELD_NAME = B.FIELD_NAME;
				
			FORALL I IN V_TAB.FIRST .. V_TAB.LAST
				INSERT INTO T_MANY_DETAIL
				VALUES V_TAB(I);

		CLOSE CSR_TABLE_CLIENT;

    P_ERROR_CODE := 1;
	P_ERROR_MSG := '';

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		NULL;
	WHEN V_ERR THEN
		ROLLBACK;
		P_ERROR_CODE := V_ERROR_CODE;
		P_ERROR_MSG := V_ERROR_MSG;
	WHEN OTHERS THEN
   -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
		ROLLBACK;
		P_ERROR_CODE := -1;
		P_ERROR_MSG := SUBSTR(SQLERRM(SQLCODE),1,200);
		RAISE;
END SP_UPDATE_CLIENT_TYPE;